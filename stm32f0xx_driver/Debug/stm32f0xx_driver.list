
stm32f0xx_driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001850  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000054  08001910  08001910  00011910  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001964  08001964  00020064  2**0
                  CONTENTS
  4 .ARM          00000000  08001964  08001964  00020064  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001964  08001964  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001964  08001964  00011964  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001968  08001968  00011968  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  0800196c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000048  20000064  080019d0  00020064  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000ac  080019d0  000200ac  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 12 .debug_info   000016aa  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000729  00000000  00000000  00021736  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000001e0  00000000  00000000  00021e60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000188  00000000  00000000  00022040  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003bed  00000000  00000000  000221c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000023d2  00000000  00000000  00025db5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0000e7d2  00000000  00000000  00028187  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00036959  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000095c  00000000  00000000  000369ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000064 	.word	0x20000064
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080018f8 	.word	0x080018f8

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000068 	.word	0x20000068
 8000104:	080018f8 	.word	0x080018f8

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	; 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f806 	bl	8000230 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			; (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__aeabi_idiv0>:
 8000230:	4770      	bx	lr
 8000232:	46c0      	nop			; (mov r8, r8)

08000234 <lcd_send_command>:
static void lcd_enable(void);
static void mdelay(uint32_t cnt);
static void udelay(uint32_t cnt);

void lcd_send_command(uint8_t cmd)
{
 8000234:	b580      	push	{r7, lr}
 8000236:	b082      	sub	sp, #8
 8000238:	af00      	add	r7, sp, #0
 800023a:	0002      	movs	r2, r0
 800023c:	1dfb      	adds	r3, r7, #7
 800023e:	701a      	strb	r2, [r3, #0]
	/* RS=0 for LCD command */
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_RS, GPIO_PIN_RESET);
 8000240:	4b0f      	ldr	r3, [pc, #60]	; (8000280 <lcd_send_command+0x4c>)
 8000242:	2200      	movs	r2, #0
 8000244:	2106      	movs	r1, #6
 8000246:	0018      	movs	r0, r3
 8000248:	f000 fbf4 	bl	8000a34 <GPIO_WriteToOutputPin>

	/*R/nW = 0, for write */
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_RW, GPIO_PIN_RESET);
 800024c:	4b0c      	ldr	r3, [pc, #48]	; (8000280 <lcd_send_command+0x4c>)
 800024e:	2200      	movs	r2, #0
 8000250:	2100      	movs	r1, #0
 8000252:	0018      	movs	r0, r3
 8000254:	f000 fbee 	bl	8000a34 <GPIO_WriteToOutputPin>

	write_4_bits(cmd >> 4);
 8000258:	1dfb      	adds	r3, r7, #7
 800025a:	781b      	ldrb	r3, [r3, #0]
 800025c:	091b      	lsrs	r3, r3, #4
 800025e:	b2db      	uxtb	r3, r3
 8000260:	0018      	movs	r0, r3
 8000262:	f000 f903 	bl	800046c <write_4_bits>
	write_4_bits(cmd & 0x0F);
 8000266:	1dfb      	adds	r3, r7, #7
 8000268:	781b      	ldrb	r3, [r3, #0]
 800026a:	220f      	movs	r2, #15
 800026c:	4013      	ands	r3, r2
 800026e:	b2db      	uxtb	r3, r3
 8000270:	0018      	movs	r0, r3
 8000272:	f000 f8fb 	bl	800046c <write_4_bits>

}
 8000276:	46c0      	nop			; (mov r8, r8)
 8000278:	46bd      	mov	sp, r7
 800027a:	b002      	add	sp, #8
 800027c:	bd80      	pop	{r7, pc}
 800027e:	46c0      	nop			; (mov r8, r8)
 8000280:	48000800 	.word	0x48000800

08000284 <lcd_print_char>:
 *Here we used 4 bit parallel data transmission.
 *First higher nibble of the data will be sent on to the data lines D4,D5,D6,D7
 *Then lower nibble of the data will be set on to the data lines D4,D5,D6,D7
 */
void lcd_print_char(uint8_t data)
{
 8000284:	b580      	push	{r7, lr}
 8000286:	b082      	sub	sp, #8
 8000288:	af00      	add	r7, sp, #0
 800028a:	0002      	movs	r2, r0
 800028c:	1dfb      	adds	r3, r7, #7
 800028e:	701a      	strb	r2, [r3, #0]
	/* RS=1 for LCD user data */
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_RS, GPIO_PIN_SET);
 8000290:	4b0f      	ldr	r3, [pc, #60]	; (80002d0 <lcd_print_char+0x4c>)
 8000292:	2201      	movs	r2, #1
 8000294:	2106      	movs	r1, #6
 8000296:	0018      	movs	r0, r3
 8000298:	f000 fbcc 	bl	8000a34 <GPIO_WriteToOutputPin>

	/*R/nW = 0, for write */
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_RW, GPIO_PIN_RESET);
 800029c:	4b0c      	ldr	r3, [pc, #48]	; (80002d0 <lcd_print_char+0x4c>)
 800029e:	2200      	movs	r2, #0
 80002a0:	2100      	movs	r1, #0
 80002a2:	0018      	movs	r0, r3
 80002a4:	f000 fbc6 	bl	8000a34 <GPIO_WriteToOutputPin>

	write_4_bits(data >> 4);  /*Higher nibble*/
 80002a8:	1dfb      	adds	r3, r7, #7
 80002aa:	781b      	ldrb	r3, [r3, #0]
 80002ac:	091b      	lsrs	r3, r3, #4
 80002ae:	b2db      	uxtb	r3, r3
 80002b0:	0018      	movs	r0, r3
 80002b2:	f000 f8db 	bl	800046c <write_4_bits>
	write_4_bits(data & 0x0F); /*Lower nibble*/
 80002b6:	1dfb      	adds	r3, r7, #7
 80002b8:	781b      	ldrb	r3, [r3, #0]
 80002ba:	220f      	movs	r2, #15
 80002bc:	4013      	ands	r3, r2
 80002be:	b2db      	uxtb	r3, r3
 80002c0:	0018      	movs	r0, r3
 80002c2:	f000 f8d3 	bl	800046c <write_4_bits>

}
 80002c6:	46c0      	nop			; (mov r8, r8)
 80002c8:	46bd      	mov	sp, r7
 80002ca:	b002      	add	sp, #8
 80002cc:	bd80      	pop	{r7, pc}
 80002ce:	46c0      	nop			; (mov r8, r8)
 80002d0:	48000800 	.word	0x48000800

080002d4 <lcd_print_string>:


void lcd_print_string(char *message)
{
 80002d4:	b580      	push	{r7, lr}
 80002d6:	b082      	sub	sp, #8
 80002d8:	af00      	add	r7, sp, #0
 80002da:	6078      	str	r0, [r7, #4]

      do
      {
          lcd_print_char((uint8_t)*message++);
 80002dc:	687b      	ldr	r3, [r7, #4]
 80002de:	1c5a      	adds	r2, r3, #1
 80002e0:	607a      	str	r2, [r7, #4]
 80002e2:	781b      	ldrb	r3, [r3, #0]
 80002e4:	0018      	movs	r0, r3
 80002e6:	f7ff ffcd 	bl	8000284 <lcd_print_char>
      }
      while (*message != '\0');
 80002ea:	687b      	ldr	r3, [r7, #4]
 80002ec:	781b      	ldrb	r3, [r3, #0]
 80002ee:	2b00      	cmp	r3, #0
 80002f0:	d1f4      	bne.n	80002dc <lcd_print_string+0x8>

}
 80002f2:	46c0      	nop			; (mov r8, r8)
 80002f4:	46c0      	nop			; (mov r8, r8)
 80002f6:	46bd      	mov	sp, r7
 80002f8:	b002      	add	sp, #8
 80002fa:	bd80      	pop	{r7, pc}

080002fc <lcd_init>:


void lcd_init(void)
{
 80002fc:	b590      	push	{r4, r7, lr}
 80002fe:	b087      	sub	sp, #28
 8000300:	af00      	add	r7, sp, #0

	//1. Configure the gpio pins which are used for lcd connections

	GPIO_Handle_t lcd_signal,lcd_data;

	lcd_signal.pGPIOx = LCD_GPIO_PORT;
 8000302:	240c      	movs	r4, #12
 8000304:	193b      	adds	r3, r7, r4
 8000306:	4a58      	ldr	r2, [pc, #352]	; (8000468 <lcd_init+0x16c>)
 8000308:	601a      	str	r2, [r3, #0]
	lcd_signal.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUT;
 800030a:	193b      	adds	r3, r7, r4
 800030c:	2201      	movs	r2, #1
 800030e:	715a      	strb	r2, [r3, #5]
	lcd_signal.GPIO_PinConfig.GPIO_PinNumber = LCD_GPIO_RS;
 8000310:	193b      	adds	r3, r7, r4
 8000312:	2206      	movs	r2, #6
 8000314:	711a      	strb	r2, [r3, #4]
	lcd_signal.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 8000316:	193b      	adds	r3, r7, r4
 8000318:	2200      	movs	r2, #0
 800031a:	721a      	strb	r2, [r3, #8]
	lcd_signal.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 800031c:	193b      	adds	r3, r7, r4
 800031e:	2200      	movs	r2, #0
 8000320:	71da      	strb	r2, [r3, #7]
	lcd_signal.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 8000322:	193b      	adds	r3, r7, r4
 8000324:	2202      	movs	r2, #2
 8000326:	719a      	strb	r2, [r3, #6]
	GPIO_Init(&lcd_signal);
 8000328:	193b      	adds	r3, r7, r4
 800032a:	0018      	movs	r0, r3
 800032c:	f000 f9fa 	bl	8000724 <GPIO_Init>

	            lcd_data.pGPIOx = LCD_GPIO_PORT2;
 8000330:	003b      	movs	r3, r7
 8000332:	2290      	movs	r2, #144	; 0x90
 8000334:	05d2      	lsls	r2, r2, #23
 8000336:	601a      	str	r2, [r3, #0]
	            lcd_data.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUT;
 8000338:	003b      	movs	r3, r7
 800033a:	2201      	movs	r2, #1
 800033c:	715a      	strb	r2, [r3, #5]
	            lcd_data.GPIO_PinConfig.GPIO_PinNumber = LCD_GPIO_D6;
 800033e:	003b      	movs	r3, r7
 8000340:	2208      	movs	r2, #8
 8000342:	711a      	strb	r2, [r3, #4]
	            lcd_data.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 8000344:	003b      	movs	r3, r7
 8000346:	2200      	movs	r2, #0
 8000348:	721a      	strb	r2, [r3, #8]
	            lcd_data.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 800034a:	003b      	movs	r3, r7
 800034c:	2200      	movs	r2, #0
 800034e:	71da      	strb	r2, [r3, #7]
	            lcd_data.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 8000350:	003b      	movs	r3, r7
 8000352:	2202      	movs	r2, #2
 8000354:	719a      	strb	r2, [r3, #6]
				GPIO_Init(&lcd_data);
 8000356:	003b      	movs	r3, r7
 8000358:	0018      	movs	r0, r3
 800035a:	f000 f9e3 	bl	8000724 <GPIO_Init>

	lcd_signal.GPIO_PinConfig.GPIO_PinNumber = LCD_GPIO_RW;
 800035e:	193b      	adds	r3, r7, r4
 8000360:	2200      	movs	r2, #0
 8000362:	711a      	strb	r2, [r3, #4]
	GPIO_Init(&lcd_signal);
 8000364:	193b      	adds	r3, r7, r4
 8000366:	0018      	movs	r0, r3
 8000368:	f000 f9dc 	bl	8000724 <GPIO_Init>

	lcd_signal.GPIO_PinConfig.GPIO_PinNumber = LCD_GPIO_EN;
 800036c:	0021      	movs	r1, r4
 800036e:	193b      	adds	r3, r7, r4
 8000370:	2207      	movs	r2, #7
 8000372:	711a      	strb	r2, [r3, #4]
	GPIO_Init(&lcd_signal);
 8000374:	000c      	movs	r4, r1
 8000376:	187b      	adds	r3, r7, r1
 8000378:	0018      	movs	r0, r3
 800037a:	f000 f9d3 	bl	8000724 <GPIO_Init>

	lcd_signal.GPIO_PinConfig.GPIO_PinNumber = LCD_GPIO_D4;
 800037e:	0021      	movs	r1, r4
 8000380:	187b      	adds	r3, r7, r1
 8000382:	2208      	movs	r2, #8
 8000384:	711a      	strb	r2, [r3, #4]
	GPIO_Init(&lcd_signal);
 8000386:	000c      	movs	r4, r1
 8000388:	187b      	adds	r3, r7, r1
 800038a:	0018      	movs	r0, r3
 800038c:	f000 f9ca 	bl	8000724 <GPIO_Init>

	lcd_signal.GPIO_PinConfig.GPIO_PinNumber = LCD_GPIO_D5;
 8000390:	0021      	movs	r1, r4
 8000392:	187b      	adds	r3, r7, r1
 8000394:	2209      	movs	r2, #9
 8000396:	711a      	strb	r2, [r3, #4]
	GPIO_Init(&lcd_signal);
 8000398:	187b      	adds	r3, r7, r1
 800039a:	0018      	movs	r0, r3
 800039c:	f000 f9c2 	bl	8000724 <GPIO_Init>





	lcd_data.GPIO_PinConfig.GPIO_PinNumber = LCD_GPIO_D7;
 80003a0:	003b      	movs	r3, r7
 80003a2:	220b      	movs	r2, #11
 80003a4:	711a      	strb	r2, [r3, #4]
	GPIO_Init(&lcd_data);
 80003a6:	003b      	movs	r3, r7
 80003a8:	0018      	movs	r0, r3
 80003aa:	f000 f9bb 	bl	8000724 <GPIO_Init>

	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_RS, GPIO_PIN_RESET);
 80003ae:	4b2e      	ldr	r3, [pc, #184]	; (8000468 <lcd_init+0x16c>)
 80003b0:	2200      	movs	r2, #0
 80003b2:	2106      	movs	r1, #6
 80003b4:	0018      	movs	r0, r3
 80003b6:	f000 fb3d 	bl	8000a34 <GPIO_WriteToOutputPin>
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_RW, GPIO_PIN_RESET);
 80003ba:	4b2b      	ldr	r3, [pc, #172]	; (8000468 <lcd_init+0x16c>)
 80003bc:	2200      	movs	r2, #0
 80003be:	2100      	movs	r1, #0
 80003c0:	0018      	movs	r0, r3
 80003c2:	f000 fb37 	bl	8000a34 <GPIO_WriteToOutputPin>
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_EN, GPIO_PIN_RESET);
 80003c6:	4b28      	ldr	r3, [pc, #160]	; (8000468 <lcd_init+0x16c>)
 80003c8:	2200      	movs	r2, #0
 80003ca:	2107      	movs	r1, #7
 80003cc:	0018      	movs	r0, r3
 80003ce:	f000 fb31 	bl	8000a34 <GPIO_WriteToOutputPin>
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_D4, GPIO_PIN_RESET);
 80003d2:	4b25      	ldr	r3, [pc, #148]	; (8000468 <lcd_init+0x16c>)
 80003d4:	2200      	movs	r2, #0
 80003d6:	2108      	movs	r1, #8
 80003d8:	0018      	movs	r0, r3
 80003da:	f000 fb2b 	bl	8000a34 <GPIO_WriteToOutputPin>
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_D5, GPIO_PIN_RESET);
 80003de:	4b22      	ldr	r3, [pc, #136]	; (8000468 <lcd_init+0x16c>)
 80003e0:	2200      	movs	r2, #0
 80003e2:	2109      	movs	r1, #9
 80003e4:	0018      	movs	r0, r3
 80003e6:	f000 fb25 	bl	8000a34 <GPIO_WriteToOutputPin>
	GPIO_WriteToOutputPin(LCD_GPIO_PORT2, LCD_GPIO_D6, GPIO_PIN_RESET);
 80003ea:	2390      	movs	r3, #144	; 0x90
 80003ec:	05db      	lsls	r3, r3, #23
 80003ee:	2200      	movs	r2, #0
 80003f0:	2108      	movs	r1, #8
 80003f2:	0018      	movs	r0, r3
 80003f4:	f000 fb1e 	bl	8000a34 <GPIO_WriteToOutputPin>
	GPIO_WriteToOutputPin(LCD_GPIO_PORT2, LCD_GPIO_D7, GPIO_PIN_RESET);
 80003f8:	2390      	movs	r3, #144	; 0x90
 80003fa:	05db      	lsls	r3, r3, #23
 80003fc:	2200      	movs	r2, #0
 80003fe:	210b      	movs	r1, #11
 8000400:	0018      	movs	r0, r3
 8000402:	f000 fb17 	bl	8000a34 <GPIO_WriteToOutputPin>

	//2. Do the LCD initialization

	mdelay(40);
 8000406:	2028      	movs	r0, #40	; 0x28
 8000408:	f000 f8c6 	bl	8000598 <mdelay>

	/*RS = 0 , For LCD command */
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_RS, GPIO_PIN_RESET);
 800040c:	4b16      	ldr	r3, [pc, #88]	; (8000468 <lcd_init+0x16c>)
 800040e:	2200      	movs	r2, #0
 8000410:	2106      	movs	r1, #6
 8000412:	0018      	movs	r0, r3
 8000414:	f000 fb0e 	bl	8000a34 <GPIO_WriteToOutputPin>

	/* RnW = 0, Writing to LCD */
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_RW, GPIO_PIN_RESET);
 8000418:	4b13      	ldr	r3, [pc, #76]	; (8000468 <lcd_init+0x16c>)
 800041a:	2200      	movs	r2, #0
 800041c:	2100      	movs	r1, #0
 800041e:	0018      	movs	r0, r3
 8000420:	f000 fb08 	bl	8000a34 <GPIO_WriteToOutputPin>

	write_4_bits(0x3);
 8000424:	2003      	movs	r0, #3
 8000426:	f000 f821 	bl	800046c <write_4_bits>

	mdelay(5);
 800042a:	2005      	movs	r0, #5
 800042c:	f000 f8b4 	bl	8000598 <mdelay>

	write_4_bits(0x3);
 8000430:	2003      	movs	r0, #3
 8000432:	f000 f81b 	bl	800046c <write_4_bits>

	udelay(150);
 8000436:	2096      	movs	r0, #150	; 0x96
 8000438:	f000 f8c8 	bl	80005cc <udelay>

	write_4_bits(0x3);
 800043c:	2003      	movs	r0, #3
 800043e:	f000 f815 	bl	800046c <write_4_bits>
	write_4_bits(0x2);
 8000442:	2002      	movs	r0, #2
 8000444:	f000 f812 	bl	800046c <write_4_bits>

	//function set command
		lcd_send_command(LCD_CMD_4DL_2N_5X8F);
 8000448:	2028      	movs	r0, #40	; 0x28
 800044a:	f7ff fef3 	bl	8000234 <lcd_send_command>

		//disply ON and cursor ON
		lcd_send_command(LCD_CMD_DON_CURON);
 800044e:	200e      	movs	r0, #14
 8000450:	f7ff fef0 	bl	8000234 <lcd_send_command>

		lcd_display_clear();
 8000454:	f000 f848 	bl	80004e8 <lcd_display_clear>

		//entry mode set
		lcd_send_command(LCD_CMD_INCADD);
 8000458:	2006      	movs	r0, #6
 800045a:	f7ff feeb 	bl	8000234 <lcd_send_command>



}
 800045e:	46c0      	nop			; (mov r8, r8)
 8000460:	46bd      	mov	sp, r7
 8000462:	b007      	add	sp, #28
 8000464:	bd90      	pop	{r4, r7, pc}
 8000466:	46c0      	nop			; (mov r8, r8)
 8000468:	48000800 	.word	0x48000800

0800046c <write_4_bits>:

/* writes 4 bits of data/command on to D4,D5,D6,D7 lines */
static void write_4_bits(uint8_t value)
{
 800046c:	b580      	push	{r7, lr}
 800046e:	b082      	sub	sp, #8
 8000470:	af00      	add	r7, sp, #0
 8000472:	0002      	movs	r2, r0
 8000474:	1dfb      	adds	r3, r7, #7
 8000476:	701a      	strb	r2, [r3, #0]
	GPIO_WriteToOutputPin(LCD_GPIO_PORT,LCD_GPIO_D4, ((value >> 0) & 0x1) );
 8000478:	1dfb      	adds	r3, r7, #7
 800047a:	781b      	ldrb	r3, [r3, #0]
 800047c:	2201      	movs	r2, #1
 800047e:	4013      	ands	r3, r2
 8000480:	b2db      	uxtb	r3, r3
 8000482:	4818      	ldr	r0, [pc, #96]	; (80004e4 <write_4_bits+0x78>)
 8000484:	001a      	movs	r2, r3
 8000486:	2108      	movs	r1, #8
 8000488:	f000 fad4 	bl	8000a34 <GPIO_WriteToOutputPin>
	GPIO_WriteToOutputPin(LCD_GPIO_PORT,LCD_GPIO_D5, ((value >> 1) & 0x1) );
 800048c:	1dfb      	adds	r3, r7, #7
 800048e:	781b      	ldrb	r3, [r3, #0]
 8000490:	085b      	lsrs	r3, r3, #1
 8000492:	b2db      	uxtb	r3, r3
 8000494:	2201      	movs	r2, #1
 8000496:	4013      	ands	r3, r2
 8000498:	b2db      	uxtb	r3, r3
 800049a:	4812      	ldr	r0, [pc, #72]	; (80004e4 <write_4_bits+0x78>)
 800049c:	001a      	movs	r2, r3
 800049e:	2109      	movs	r1, #9
 80004a0:	f000 fac8 	bl	8000a34 <GPIO_WriteToOutputPin>
	GPIO_WriteToOutputPin(LCD_GPIO_PORT2,LCD_GPIO_D6, ((value >> 2) & 0x1) );
 80004a4:	1dfb      	adds	r3, r7, #7
 80004a6:	781b      	ldrb	r3, [r3, #0]
 80004a8:	089b      	lsrs	r3, r3, #2
 80004aa:	b2db      	uxtb	r3, r3
 80004ac:	2201      	movs	r2, #1
 80004ae:	4013      	ands	r3, r2
 80004b0:	b2da      	uxtb	r2, r3
 80004b2:	2390      	movs	r3, #144	; 0x90
 80004b4:	05db      	lsls	r3, r3, #23
 80004b6:	2108      	movs	r1, #8
 80004b8:	0018      	movs	r0, r3
 80004ba:	f000 fabb 	bl	8000a34 <GPIO_WriteToOutputPin>
	GPIO_WriteToOutputPin(LCD_GPIO_PORT2,LCD_GPIO_D7, ((value >> 3) & 0x1) );
 80004be:	1dfb      	adds	r3, r7, #7
 80004c0:	781b      	ldrb	r3, [r3, #0]
 80004c2:	08db      	lsrs	r3, r3, #3
 80004c4:	b2db      	uxtb	r3, r3
 80004c6:	2201      	movs	r2, #1
 80004c8:	4013      	ands	r3, r2
 80004ca:	b2da      	uxtb	r2, r3
 80004cc:	2390      	movs	r3, #144	; 0x90
 80004ce:	05db      	lsls	r3, r3, #23
 80004d0:	210b      	movs	r1, #11
 80004d2:	0018      	movs	r0, r3
 80004d4:	f000 faae 	bl	8000a34 <GPIO_WriteToOutputPin>

	lcd_enable();
 80004d8:	f000 f844 	bl	8000564 <lcd_enable>

}
 80004dc:	46c0      	nop			; (mov r8, r8)
 80004de:	46bd      	mov	sp, r7
 80004e0:	b002      	add	sp, #8
 80004e2:	bd80      	pop	{r7, pc}
 80004e4:	48000800 	.word	0x48000800

080004e8 <lcd_display_clear>:

void lcd_display_clear(void)
{
 80004e8:	b580      	push	{r7, lr}
 80004ea:	af00      	add	r7, sp, #0
	//Display clear
	lcd_send_command(LCD_CMD_DIS_CLEAR);
 80004ec:	2001      	movs	r0, #1
 80004ee:	f7ff fea1 	bl	8000234 <lcd_send_command>
	/*
	 * check page number 24 of datasheet.
	 * display clear command execution wait time is around 2ms
	 */

	mdelay(2);
 80004f2:	2002      	movs	r0, #2
 80004f4:	f000 f850 	bl	8000598 <mdelay>
}
 80004f8:	46c0      	nop			; (mov r8, r8)
 80004fa:	46bd      	mov	sp, r7
 80004fc:	bd80      	pop	{r7, pc}

080004fe <lcd_set_cursor>:
  *   Set Lcd to a specified location given by row and column information
  *   Row Number (1 to 2)
  *   Column Number (1 to 16) Assuming a 2 X 16 characters display
  */
void lcd_set_cursor(uint8_t row, uint8_t column)
{
 80004fe:	b580      	push	{r7, lr}
 8000500:	b082      	sub	sp, #8
 8000502:	af00      	add	r7, sp, #0
 8000504:	0002      	movs	r2, r0
 8000506:	1dfb      	adds	r3, r7, #7
 8000508:	701a      	strb	r2, [r3, #0]
 800050a:	1dbb      	adds	r3, r7, #6
 800050c:	1c0a      	adds	r2, r1, #0
 800050e:	701a      	strb	r2, [r3, #0]
  column--;
 8000510:	1dbb      	adds	r3, r7, #6
 8000512:	781a      	ldrb	r2, [r3, #0]
 8000514:	1dbb      	adds	r3, r7, #6
 8000516:	3a01      	subs	r2, #1
 8000518:	701a      	strb	r2, [r3, #0]
  switch (row)
 800051a:	1dfb      	adds	r3, r7, #7
 800051c:	781b      	ldrb	r3, [r3, #0]
 800051e:	2b01      	cmp	r3, #1
 8000520:	d002      	beq.n	8000528 <lcd_set_cursor+0x2a>
 8000522:	2b02      	cmp	r3, #2
 8000524:	d00d      	beq.n	8000542 <lcd_set_cursor+0x44>
    case 2:
      /* Set cursor to 2nd row address and add index*/
        lcd_send_command((column |= 0xC0));
      break;
    default:
      break;
 8000526:	e019      	b.n	800055c <lcd_set_cursor+0x5e>
      lcd_send_command((column |= 0x80));
 8000528:	1dbb      	adds	r3, r7, #6
 800052a:	1dba      	adds	r2, r7, #6
 800052c:	7812      	ldrb	r2, [r2, #0]
 800052e:	2180      	movs	r1, #128	; 0x80
 8000530:	4249      	negs	r1, r1
 8000532:	430a      	orrs	r2, r1
 8000534:	701a      	strb	r2, [r3, #0]
 8000536:	1dbb      	adds	r3, r7, #6
 8000538:	781b      	ldrb	r3, [r3, #0]
 800053a:	0018      	movs	r0, r3
 800053c:	f7ff fe7a 	bl	8000234 <lcd_send_command>
      break;
 8000540:	e00c      	b.n	800055c <lcd_set_cursor+0x5e>
        lcd_send_command((column |= 0xC0));
 8000542:	1dbb      	adds	r3, r7, #6
 8000544:	1dba      	adds	r2, r7, #6
 8000546:	7812      	ldrb	r2, [r2, #0]
 8000548:	2140      	movs	r1, #64	; 0x40
 800054a:	4249      	negs	r1, r1
 800054c:	430a      	orrs	r2, r1
 800054e:	701a      	strb	r2, [r3, #0]
 8000550:	1dbb      	adds	r3, r7, #6
 8000552:	781b      	ldrb	r3, [r3, #0]
 8000554:	0018      	movs	r0, r3
 8000556:	f7ff fe6d 	bl	8000234 <lcd_send_command>
      break;
 800055a:	46c0      	nop			; (mov r8, r8)
  }
}
 800055c:	46c0      	nop			; (mov r8, r8)
 800055e:	46bd      	mov	sp, r7
 8000560:	b002      	add	sp, #8
 8000562:	bd80      	pop	{r7, pc}

08000564 <lcd_enable>:



static void lcd_enable(void)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	af00      	add	r7, sp, #0
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_EN, GPIO_PIN_SET);
 8000568:	4b0a      	ldr	r3, [pc, #40]	; (8000594 <lcd_enable+0x30>)
 800056a:	2201      	movs	r2, #1
 800056c:	2107      	movs	r1, #7
 800056e:	0018      	movs	r0, r3
 8000570:	f000 fa60 	bl	8000a34 <GPIO_WriteToOutputPin>
	udelay(10);
 8000574:	200a      	movs	r0, #10
 8000576:	f000 f829 	bl	80005cc <udelay>
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_EN, GPIO_PIN_RESET);
 800057a:	4b06      	ldr	r3, [pc, #24]	; (8000594 <lcd_enable+0x30>)
 800057c:	2200      	movs	r2, #0
 800057e:	2107      	movs	r1, #7
 8000580:	0018      	movs	r0, r3
 8000582:	f000 fa57 	bl	8000a34 <GPIO_WriteToOutputPin>
	udelay(100);/* execution time > 37 micro seconds */
 8000586:	2064      	movs	r0, #100	; 0x64
 8000588:	f000 f820 	bl	80005cc <udelay>
}
 800058c:	46c0      	nop			; (mov r8, r8)
 800058e:	46bd      	mov	sp, r7
 8000590:	bd80      	pop	{r7, pc}
 8000592:	46c0      	nop			; (mov r8, r8)
 8000594:	48000800 	.word	0x48000800

08000598 <mdelay>:
	udelay(100);
}


static void mdelay(uint32_t cnt)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	b084      	sub	sp, #16
 800059c:	af00      	add	r7, sp, #0
 800059e:	6078      	str	r0, [r7, #4]
	for(uint32_t i=0 ; i < (cnt * 1000); i++);
 80005a0:	2300      	movs	r3, #0
 80005a2:	60fb      	str	r3, [r7, #12]
 80005a4:	e002      	b.n	80005ac <mdelay+0x14>
 80005a6:	68fb      	ldr	r3, [r7, #12]
 80005a8:	3301      	adds	r3, #1
 80005aa:	60fb      	str	r3, [r7, #12]
 80005ac:	687a      	ldr	r2, [r7, #4]
 80005ae:	0013      	movs	r3, r2
 80005b0:	015b      	lsls	r3, r3, #5
 80005b2:	1a9b      	subs	r3, r3, r2
 80005b4:	009b      	lsls	r3, r3, #2
 80005b6:	189b      	adds	r3, r3, r2
 80005b8:	00db      	lsls	r3, r3, #3
 80005ba:	001a      	movs	r2, r3
 80005bc:	68fb      	ldr	r3, [r7, #12]
 80005be:	4293      	cmp	r3, r2
 80005c0:	d3f1      	bcc.n	80005a6 <mdelay+0xe>
}
 80005c2:	46c0      	nop			; (mov r8, r8)
 80005c4:	46c0      	nop			; (mov r8, r8)
 80005c6:	46bd      	mov	sp, r7
 80005c8:	b004      	add	sp, #16
 80005ca:	bd80      	pop	{r7, pc}

080005cc <udelay>:

static void udelay(uint32_t cnt)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b084      	sub	sp, #16
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	6078      	str	r0, [r7, #4]
	for(uint32_t i=0 ; i < (cnt * 1); i++);
 80005d4:	2300      	movs	r3, #0
 80005d6:	60fb      	str	r3, [r7, #12]
 80005d8:	e002      	b.n	80005e0 <udelay+0x14>
 80005da:	68fb      	ldr	r3, [r7, #12]
 80005dc:	3301      	adds	r3, #1
 80005de:	60fb      	str	r3, [r7, #12]
 80005e0:	68fa      	ldr	r2, [r7, #12]
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	429a      	cmp	r2, r3
 80005e6:	d3f8      	bcc.n	80005da <udelay+0xe>
}
 80005e8:	46c0      	nop			; (mov r8, r8)
 80005ea:	46c0      	nop			; (mov r8, r8)
 80005ec:	46bd      	mov	sp, r7
 80005ee:	b004      	add	sp, #16
 80005f0:	bd80      	pop	{r7, pc}
	...

080005f4 <GPIO_PeriClockControl>:
 * @return            -  none
 *
 * @Note              -  none
 */
void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b082      	sub	sp, #8
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	6078      	str	r0, [r7, #4]
 80005fc:	000a      	movs	r2, r1
 80005fe:	1cfb      	adds	r3, r7, #3
 8000600:	701a      	strb	r2, [r3, #0]
	if(EnorDi == ENABLE)
 8000602:	1cfb      	adds	r3, r7, #3
 8000604:	781b      	ldrb	r3, [r3, #0]
 8000606:	2b01      	cmp	r3, #1
 8000608:	d13c      	bne.n	8000684 <GPIO_PeriClockControl+0x90>
	{
		if(pGPIOx == GPIOA)
 800060a:	687a      	ldr	r2, [r7, #4]
 800060c:	2390      	movs	r3, #144	; 0x90
 800060e:	05db      	lsls	r3, r3, #23
 8000610:	429a      	cmp	r2, r3
 8000612:	d107      	bne.n	8000624 <GPIO_PeriClockControl+0x30>
		{
			GPIOA_PCLK_EN();
 8000614:	4b39      	ldr	r3, [pc, #228]	; (80006fc <GPIO_PeriClockControl+0x108>)
 8000616:	695a      	ldr	r2, [r3, #20]
 8000618:	4b38      	ldr	r3, [pc, #224]	; (80006fc <GPIO_PeriClockControl+0x108>)
 800061a:	2180      	movs	r1, #128	; 0x80
 800061c:	0289      	lsls	r1, r1, #10
 800061e:	430a      	orrs	r2, r1
 8000620:	615a      	str	r2, [r3, #20]
				{
					GPIOF_PCLK_DI();
				}
	}

}
 8000622:	e066      	b.n	80006f2 <GPIO_PeriClockControl+0xfe>
		}else if (pGPIOx == GPIOB)
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	4a36      	ldr	r2, [pc, #216]	; (8000700 <GPIO_PeriClockControl+0x10c>)
 8000628:	4293      	cmp	r3, r2
 800062a:	d107      	bne.n	800063c <GPIO_PeriClockControl+0x48>
			GPIOB_PCLK_EN();
 800062c:	4b33      	ldr	r3, [pc, #204]	; (80006fc <GPIO_PeriClockControl+0x108>)
 800062e:	695a      	ldr	r2, [r3, #20]
 8000630:	4b32      	ldr	r3, [pc, #200]	; (80006fc <GPIO_PeriClockControl+0x108>)
 8000632:	2180      	movs	r1, #128	; 0x80
 8000634:	02c9      	lsls	r1, r1, #11
 8000636:	430a      	orrs	r2, r1
 8000638:	615a      	str	r2, [r3, #20]
}
 800063a:	e05a      	b.n	80006f2 <GPIO_PeriClockControl+0xfe>
		}else if (pGPIOx == GPIOC)
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	4a31      	ldr	r2, [pc, #196]	; (8000704 <GPIO_PeriClockControl+0x110>)
 8000640:	4293      	cmp	r3, r2
 8000642:	d107      	bne.n	8000654 <GPIO_PeriClockControl+0x60>
			GPIOC_PCLK_EN();
 8000644:	4b2d      	ldr	r3, [pc, #180]	; (80006fc <GPIO_PeriClockControl+0x108>)
 8000646:	695a      	ldr	r2, [r3, #20]
 8000648:	4b2c      	ldr	r3, [pc, #176]	; (80006fc <GPIO_PeriClockControl+0x108>)
 800064a:	2180      	movs	r1, #128	; 0x80
 800064c:	0309      	lsls	r1, r1, #12
 800064e:	430a      	orrs	r2, r1
 8000650:	615a      	str	r2, [r3, #20]
}
 8000652:	e04e      	b.n	80006f2 <GPIO_PeriClockControl+0xfe>
		}else if (pGPIOx == GPIOD)
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	4a2c      	ldr	r2, [pc, #176]	; (8000708 <GPIO_PeriClockControl+0x114>)
 8000658:	4293      	cmp	r3, r2
 800065a:	d107      	bne.n	800066c <GPIO_PeriClockControl+0x78>
			GPIOD_PCLK_EN();
 800065c:	4b27      	ldr	r3, [pc, #156]	; (80006fc <GPIO_PeriClockControl+0x108>)
 800065e:	695a      	ldr	r2, [r3, #20]
 8000660:	4b26      	ldr	r3, [pc, #152]	; (80006fc <GPIO_PeriClockControl+0x108>)
 8000662:	2180      	movs	r1, #128	; 0x80
 8000664:	0349      	lsls	r1, r1, #13
 8000666:	430a      	orrs	r2, r1
 8000668:	615a      	str	r2, [r3, #20]
}
 800066a:	e042      	b.n	80006f2 <GPIO_PeriClockControl+0xfe>
		}else if (pGPIOx == GPIOF)
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	4a27      	ldr	r2, [pc, #156]	; (800070c <GPIO_PeriClockControl+0x118>)
 8000670:	4293      	cmp	r3, r2
 8000672:	d13e      	bne.n	80006f2 <GPIO_PeriClockControl+0xfe>
			GPIOF_PCLK_EN();
 8000674:	4b21      	ldr	r3, [pc, #132]	; (80006fc <GPIO_PeriClockControl+0x108>)
 8000676:	695a      	ldr	r2, [r3, #20]
 8000678:	4b20      	ldr	r3, [pc, #128]	; (80006fc <GPIO_PeriClockControl+0x108>)
 800067a:	2180      	movs	r1, #128	; 0x80
 800067c:	03c9      	lsls	r1, r1, #15
 800067e:	430a      	orrs	r2, r1
 8000680:	615a      	str	r2, [r3, #20]
}
 8000682:	e036      	b.n	80006f2 <GPIO_PeriClockControl+0xfe>
		        if(pGPIOx == GPIOA)
 8000684:	687a      	ldr	r2, [r7, #4]
 8000686:	2390      	movs	r3, #144	; 0x90
 8000688:	05db      	lsls	r3, r3, #23
 800068a:	429a      	cmp	r2, r3
 800068c:	d106      	bne.n	800069c <GPIO_PeriClockControl+0xa8>
					GPIOA_PCLK_DI();
 800068e:	4b1b      	ldr	r3, [pc, #108]	; (80006fc <GPIO_PeriClockControl+0x108>)
 8000690:	695a      	ldr	r2, [r3, #20]
 8000692:	4b1a      	ldr	r3, [pc, #104]	; (80006fc <GPIO_PeriClockControl+0x108>)
 8000694:	491e      	ldr	r1, [pc, #120]	; (8000710 <GPIO_PeriClockControl+0x11c>)
 8000696:	400a      	ands	r2, r1
 8000698:	615a      	str	r2, [r3, #20]
}
 800069a:	e02a      	b.n	80006f2 <GPIO_PeriClockControl+0xfe>
				}else if (pGPIOx == GPIOB)
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	4a18      	ldr	r2, [pc, #96]	; (8000700 <GPIO_PeriClockControl+0x10c>)
 80006a0:	4293      	cmp	r3, r2
 80006a2:	d106      	bne.n	80006b2 <GPIO_PeriClockControl+0xbe>
					GPIOB_PCLK_DI();
 80006a4:	4b15      	ldr	r3, [pc, #84]	; (80006fc <GPIO_PeriClockControl+0x108>)
 80006a6:	695a      	ldr	r2, [r3, #20]
 80006a8:	4b14      	ldr	r3, [pc, #80]	; (80006fc <GPIO_PeriClockControl+0x108>)
 80006aa:	491a      	ldr	r1, [pc, #104]	; (8000714 <GPIO_PeriClockControl+0x120>)
 80006ac:	400a      	ands	r2, r1
 80006ae:	615a      	str	r2, [r3, #20]
}
 80006b0:	e01f      	b.n	80006f2 <GPIO_PeriClockControl+0xfe>
				}else if (pGPIOx == GPIOC)
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	4a13      	ldr	r2, [pc, #76]	; (8000704 <GPIO_PeriClockControl+0x110>)
 80006b6:	4293      	cmp	r3, r2
 80006b8:	d106      	bne.n	80006c8 <GPIO_PeriClockControl+0xd4>
					GPIOC_PCLK_DI();
 80006ba:	4b10      	ldr	r3, [pc, #64]	; (80006fc <GPIO_PeriClockControl+0x108>)
 80006bc:	695a      	ldr	r2, [r3, #20]
 80006be:	4b0f      	ldr	r3, [pc, #60]	; (80006fc <GPIO_PeriClockControl+0x108>)
 80006c0:	4915      	ldr	r1, [pc, #84]	; (8000718 <GPIO_PeriClockControl+0x124>)
 80006c2:	400a      	ands	r2, r1
 80006c4:	615a      	str	r2, [r3, #20]
}
 80006c6:	e014      	b.n	80006f2 <GPIO_PeriClockControl+0xfe>
				}else if (pGPIOx == GPIOD)
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	4a0f      	ldr	r2, [pc, #60]	; (8000708 <GPIO_PeriClockControl+0x114>)
 80006cc:	4293      	cmp	r3, r2
 80006ce:	d106      	bne.n	80006de <GPIO_PeriClockControl+0xea>
					GPIOD_PCLK_DI();
 80006d0:	4b0a      	ldr	r3, [pc, #40]	; (80006fc <GPIO_PeriClockControl+0x108>)
 80006d2:	695a      	ldr	r2, [r3, #20]
 80006d4:	4b09      	ldr	r3, [pc, #36]	; (80006fc <GPIO_PeriClockControl+0x108>)
 80006d6:	4911      	ldr	r1, [pc, #68]	; (800071c <GPIO_PeriClockControl+0x128>)
 80006d8:	400a      	ands	r2, r1
 80006da:	615a      	str	r2, [r3, #20]
}
 80006dc:	e009      	b.n	80006f2 <GPIO_PeriClockControl+0xfe>
				}else if (pGPIOx == GPIOF)
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	4a0a      	ldr	r2, [pc, #40]	; (800070c <GPIO_PeriClockControl+0x118>)
 80006e2:	4293      	cmp	r3, r2
 80006e4:	d105      	bne.n	80006f2 <GPIO_PeriClockControl+0xfe>
					GPIOF_PCLK_DI();
 80006e6:	4b05      	ldr	r3, [pc, #20]	; (80006fc <GPIO_PeriClockControl+0x108>)
 80006e8:	695a      	ldr	r2, [r3, #20]
 80006ea:	4b04      	ldr	r3, [pc, #16]	; (80006fc <GPIO_PeriClockControl+0x108>)
 80006ec:	490c      	ldr	r1, [pc, #48]	; (8000720 <GPIO_PeriClockControl+0x12c>)
 80006ee:	400a      	ands	r2, r1
 80006f0:	615a      	str	r2, [r3, #20]
}
 80006f2:	46c0      	nop			; (mov r8, r8)
 80006f4:	46bd      	mov	sp, r7
 80006f6:	b002      	add	sp, #8
 80006f8:	bd80      	pop	{r7, pc}
 80006fa:	46c0      	nop			; (mov r8, r8)
 80006fc:	40021000 	.word	0x40021000
 8000700:	48000400 	.word	0x48000400
 8000704:	48000800 	.word	0x48000800
 8000708:	48000c00 	.word	0x48000c00
 800070c:	48001400 	.word	0x48001400
 8000710:	fffdffff 	.word	0xfffdffff
 8000714:	fffbffff 	.word	0xfffbffff
 8000718:	fff7ffff 	.word	0xfff7ffff
 800071c:	ffefffff 	.word	0xffefffff
 8000720:	ffbfffff 	.word	0xffbfffff

08000724 <GPIO_Init>:
 * @return            -
 *
 * @Note              -
 */
void GPIO_Init(GPIO_Handle_t *pGPIOHandle)
{
 8000724:	b5b0      	push	{r4, r5, r7, lr}
 8000726:	b086      	sub	sp, #24
 8000728:	af00      	add	r7, sp, #0
 800072a:	6078      	str	r0, [r7, #4]
	 uint32_t temp=0; //temp. register
 800072c:	2300      	movs	r3, #0
 800072e:	617b      	str	r3, [r7, #20]

	 //enable the peripheral clock

     GPIO_PeriClockControl(pGPIOHandle->pGPIOx, ENABLE);
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	2101      	movs	r1, #1
 8000736:	0018      	movs	r0, r3
 8000738:	f7ff ff5c 	bl	80005f4 <GPIO_PeriClockControl>

	//1 . configure the mode of gpio pin

	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG)
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	795b      	ldrb	r3, [r3, #5]
 8000740:	2b03      	cmp	r3, #3
 8000742:	d820      	bhi.n	8000786 <GPIO_Init+0x62>
	{
		//the non interrupt mode
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber ) );
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	795b      	ldrb	r3, [r3, #5]
 8000748:	001a      	movs	r2, r3
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	791b      	ldrb	r3, [r3, #4]
 800074e:	005b      	lsls	r3, r3, #1
 8000750:	409a      	lsls	r2, r3
 8000752:	0013      	movs	r3, r2
 8000754:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->MODER &= ~( 0x3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	681b      	ldr	r3, [r3, #0]
 800075a:	681a      	ldr	r2, [r3, #0]
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	791b      	ldrb	r3, [r3, #4]
 8000760:	005b      	lsls	r3, r3, #1
 8000762:	2103      	movs	r1, #3
 8000764:	4099      	lsls	r1, r3
 8000766:	000b      	movs	r3, r1
 8000768:	43db      	mvns	r3, r3
 800076a:	0019      	movs	r1, r3
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	400a      	ands	r2, r1
 8000772:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= temp; //setting
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	6819      	ldr	r1, [r3, #0]
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	681b      	ldr	r3, [r3, #0]
 800077e:	697a      	ldr	r2, [r7, #20]
 8000780:	430a      	orrs	r2, r1
 8000782:	601a      	str	r2, [r3, #0]
 8000784:	e0a6      	b.n	80008d4 <GPIO_Init+0x1b0>

	}else
	{
		//this part will code later . ( interrupt mode)
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode ==GPIO_MODE_IT_FT )
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	795b      	ldrb	r3, [r3, #5]
 800078a:	2b04      	cmp	r3, #4
 800078c:	d117      	bne.n	80007be <GPIO_Init+0x9a>
				{
					//1. configure the FTSR
					EXTI->FTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800078e:	4ba2      	ldr	r3, [pc, #648]	; (8000a18 <GPIO_Init+0x2f4>)
 8000790:	68da      	ldr	r2, [r3, #12]
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	791b      	ldrb	r3, [r3, #4]
 8000796:	0019      	movs	r1, r3
 8000798:	2301      	movs	r3, #1
 800079a:	408b      	lsls	r3, r1
 800079c:	0019      	movs	r1, r3
 800079e:	4b9e      	ldr	r3, [pc, #632]	; (8000a18 <GPIO_Init+0x2f4>)
 80007a0:	430a      	orrs	r2, r1
 80007a2:	60da      	str	r2, [r3, #12]
					//Clear the corresponding RTSR bit
					EXTI->RTSR &= ~( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80007a4:	4b9c      	ldr	r3, [pc, #624]	; (8000a18 <GPIO_Init+0x2f4>)
 80007a6:	689a      	ldr	r2, [r3, #8]
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	791b      	ldrb	r3, [r3, #4]
 80007ac:	0019      	movs	r1, r3
 80007ae:	2301      	movs	r3, #1
 80007b0:	408b      	lsls	r3, r1
 80007b2:	43db      	mvns	r3, r3
 80007b4:	0019      	movs	r1, r3
 80007b6:	4b98      	ldr	r3, [pc, #608]	; (8000a18 <GPIO_Init+0x2f4>)
 80007b8:	400a      	ands	r2, r1
 80007ba:	609a      	str	r2, [r3, #8]
 80007bc:	e035      	b.n	800082a <GPIO_Init+0x106>

				}else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode ==GPIO_MODE_IT_RT )
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	795b      	ldrb	r3, [r3, #5]
 80007c2:	2b05      	cmp	r3, #5
 80007c4:	d117      	bne.n	80007f6 <GPIO_Init+0xd2>
				{
					//1 . configure the RTSR
					EXTI->RTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80007c6:	4b94      	ldr	r3, [pc, #592]	; (8000a18 <GPIO_Init+0x2f4>)
 80007c8:	689a      	ldr	r2, [r3, #8]
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	791b      	ldrb	r3, [r3, #4]
 80007ce:	0019      	movs	r1, r3
 80007d0:	2301      	movs	r3, #1
 80007d2:	408b      	lsls	r3, r1
 80007d4:	0019      	movs	r1, r3
 80007d6:	4b90      	ldr	r3, [pc, #576]	; (8000a18 <GPIO_Init+0x2f4>)
 80007d8:	430a      	orrs	r2, r1
 80007da:	609a      	str	r2, [r3, #8]
					//Clear the corresponding RTSR bit
					EXTI->FTSR &= ~( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80007dc:	4b8e      	ldr	r3, [pc, #568]	; (8000a18 <GPIO_Init+0x2f4>)
 80007de:	68da      	ldr	r2, [r3, #12]
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	791b      	ldrb	r3, [r3, #4]
 80007e4:	0019      	movs	r1, r3
 80007e6:	2301      	movs	r3, #1
 80007e8:	408b      	lsls	r3, r1
 80007ea:	43db      	mvns	r3, r3
 80007ec:	0019      	movs	r1, r3
 80007ee:	4b8a      	ldr	r3, [pc, #552]	; (8000a18 <GPIO_Init+0x2f4>)
 80007f0:	400a      	ands	r2, r1
 80007f2:	60da      	str	r2, [r3, #12]
 80007f4:	e019      	b.n	800082a <GPIO_Init+0x106>

				}else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT )
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	795b      	ldrb	r3, [r3, #5]
 80007fa:	2b06      	cmp	r3, #6
 80007fc:	d115      	bne.n	800082a <GPIO_Init+0x106>
				{
					//1. configure both FTSR and RTSR
					EXTI->RTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80007fe:	4b86      	ldr	r3, [pc, #536]	; (8000a18 <GPIO_Init+0x2f4>)
 8000800:	689a      	ldr	r2, [r3, #8]
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	791b      	ldrb	r3, [r3, #4]
 8000806:	0019      	movs	r1, r3
 8000808:	2301      	movs	r3, #1
 800080a:	408b      	lsls	r3, r1
 800080c:	0019      	movs	r1, r3
 800080e:	4b82      	ldr	r3, [pc, #520]	; (8000a18 <GPIO_Init+0x2f4>)
 8000810:	430a      	orrs	r2, r1
 8000812:	609a      	str	r2, [r3, #8]
					//Clear the corresponding RTSR bit
					EXTI->FTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000814:	4b80      	ldr	r3, [pc, #512]	; (8000a18 <GPIO_Init+0x2f4>)
 8000816:	68da      	ldr	r2, [r3, #12]
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	791b      	ldrb	r3, [r3, #4]
 800081c:	0019      	movs	r1, r3
 800081e:	2301      	movs	r3, #1
 8000820:	408b      	lsls	r3, r1
 8000822:	0019      	movs	r1, r3
 8000824:	4b7c      	ldr	r3, [pc, #496]	; (8000a18 <GPIO_Init+0x2f4>)
 8000826:	430a      	orrs	r2, r1
 8000828:	60da      	str	r2, [r3, #12]
				}
		//2. configure the GPIO port selection in SYSCFG_EXTICR
				uint8_t temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4 ;
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	791a      	ldrb	r2, [r3, #4]
 800082e:	2313      	movs	r3, #19
 8000830:	18fb      	adds	r3, r7, r3
 8000832:	0892      	lsrs	r2, r2, #2
 8000834:	701a      	strb	r2, [r3, #0]
				uint8_t temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4;
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	791a      	ldrb	r2, [r3, #4]
 800083a:	2312      	movs	r3, #18
 800083c:	18fb      	adds	r3, r7, r3
 800083e:	2103      	movs	r1, #3
 8000840:	400a      	ands	r2, r1
 8000842:	701a      	strb	r2, [r3, #0]
				uint8_t portcode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	681a      	ldr	r2, [r3, #0]
 8000848:	2390      	movs	r3, #144	; 0x90
 800084a:	05db      	lsls	r3, r3, #23
 800084c:	429a      	cmp	r2, r3
 800084e:	d01d      	beq.n	800088c <GPIO_Init+0x168>
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	4a71      	ldr	r2, [pc, #452]	; (8000a1c <GPIO_Init+0x2f8>)
 8000856:	4293      	cmp	r3, r2
 8000858:	d016      	beq.n	8000888 <GPIO_Init+0x164>
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	681b      	ldr	r3, [r3, #0]
 800085e:	4a70      	ldr	r2, [pc, #448]	; (8000a20 <GPIO_Init+0x2fc>)
 8000860:	4293      	cmp	r3, r2
 8000862:	d00f      	beq.n	8000884 <GPIO_Init+0x160>
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	4a6e      	ldr	r2, [pc, #440]	; (8000a24 <GPIO_Init+0x300>)
 800086a:	4293      	cmp	r3, r2
 800086c:	d008      	beq.n	8000880 <GPIO_Init+0x15c>
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	681b      	ldr	r3, [r3, #0]
 8000872:	4a6d      	ldr	r2, [pc, #436]	; (8000a28 <GPIO_Init+0x304>)
 8000874:	4293      	cmp	r3, r2
 8000876:	d101      	bne.n	800087c <GPIO_Init+0x158>
 8000878:	2305      	movs	r3, #5
 800087a:	e008      	b.n	800088e <GPIO_Init+0x16a>
 800087c:	2300      	movs	r3, #0
 800087e:	e006      	b.n	800088e <GPIO_Init+0x16a>
 8000880:	2303      	movs	r3, #3
 8000882:	e004      	b.n	800088e <GPIO_Init+0x16a>
 8000884:	2302      	movs	r3, #2
 8000886:	e002      	b.n	800088e <GPIO_Init+0x16a>
 8000888:	2301      	movs	r3, #1
 800088a:	e000      	b.n	800088e <GPIO_Init+0x16a>
 800088c:	2300      	movs	r3, #0
 800088e:	2011      	movs	r0, #17
 8000890:	183a      	adds	r2, r7, r0
 8000892:	7013      	strb	r3, [r2, #0]
				SYSCFG_PCLK_EN();
 8000894:	4b65      	ldr	r3, [pc, #404]	; (8000a2c <GPIO_Init+0x308>)
 8000896:	699a      	ldr	r2, [r3, #24]
 8000898:	4b64      	ldr	r3, [pc, #400]	; (8000a2c <GPIO_Init+0x308>)
 800089a:	2101      	movs	r1, #1
 800089c:	430a      	orrs	r2, r1
 800089e:	619a      	str	r2, [r3, #24]
				SYSCFG->EXTICR[temp1] = portcode << ( temp2 * 4);
 80008a0:	183b      	adds	r3, r7, r0
 80008a2:	781a      	ldrb	r2, [r3, #0]
 80008a4:	2312      	movs	r3, #18
 80008a6:	18fb      	adds	r3, r7, r3
 80008a8:	781b      	ldrb	r3, [r3, #0]
 80008aa:	009b      	lsls	r3, r3, #2
 80008ac:	409a      	lsls	r2, r3
 80008ae:	0011      	movs	r1, r2
 80008b0:	4a5f      	ldr	r2, [pc, #380]	; (8000a30 <GPIO_Init+0x30c>)
 80008b2:	2313      	movs	r3, #19
 80008b4:	18fb      	adds	r3, r7, r3
 80008b6:	781b      	ldrb	r3, [r3, #0]
 80008b8:	3302      	adds	r3, #2
 80008ba:	009b      	lsls	r3, r3, #2
 80008bc:	5099      	str	r1, [r3, r2]
				//3 . enable the exti interrupt delivery using IMR
						EXTI->IMR |= 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber;
 80008be:	4b56      	ldr	r3, [pc, #344]	; (8000a18 <GPIO_Init+0x2f4>)
 80008c0:	681a      	ldr	r2, [r3, #0]
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	791b      	ldrb	r3, [r3, #4]
 80008c6:	0019      	movs	r1, r3
 80008c8:	2301      	movs	r3, #1
 80008ca:	408b      	lsls	r3, r1
 80008cc:	0019      	movs	r1, r3
 80008ce:	4b52      	ldr	r3, [pc, #328]	; (8000a18 <GPIO_Init+0x2f4>)
 80008d0:	430a      	orrs	r2, r1
 80008d2:	601a      	str	r2, [r3, #0]

	}

	//2. configure the speed
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) );
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	799b      	ldrb	r3, [r3, #6]
 80008d8:	001a      	movs	r2, r3
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	791b      	ldrb	r3, [r3, #4]
 80008de:	005b      	lsls	r3, r3, #1
 80008e0:	409a      	lsls	r2, r3
 80008e2:	0013      	movs	r3, r2
 80008e4:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OSPEEDR &= ~( 0x3 << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	681b      	ldr	r3, [r3, #0]
 80008ea:	689a      	ldr	r2, [r3, #8]
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	791b      	ldrb	r3, [r3, #4]
 80008f0:	005b      	lsls	r3, r3, #1
 80008f2:	2103      	movs	r1, #3
 80008f4:	4099      	lsls	r1, r3
 80008f6:	000b      	movs	r3, r1
 80008f8:	43db      	mvns	r3, r3
 80008fa:	0019      	movs	r1, r3
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	400a      	ands	r2, r1
 8000902:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR |= temp;
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	6899      	ldr	r1, [r3, #8]
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	681b      	ldr	r3, [r3, #0]
 800090e:	697a      	ldr	r2, [r7, #20]
 8000910:	430a      	orrs	r2, r1
 8000912:	609a      	str	r2, [r3, #8]

	//3. configure the pupd settings
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) );
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	79db      	ldrb	r3, [r3, #7]
 8000918:	001a      	movs	r2, r3
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	791b      	ldrb	r3, [r3, #4]
 800091e:	005b      	lsls	r3, r3, #1
 8000920:	409a      	lsls	r2, r3
 8000922:	0013      	movs	r3, r2
 8000924:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->PUPDR &= ~( 0x3 << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	681b      	ldr	r3, [r3, #0]
 800092a:	68da      	ldr	r2, [r3, #12]
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	791b      	ldrb	r3, [r3, #4]
 8000930:	005b      	lsls	r3, r3, #1
 8000932:	2103      	movs	r1, #3
 8000934:	4099      	lsls	r1, r3
 8000936:	000b      	movs	r3, r1
 8000938:	43db      	mvns	r3, r3
 800093a:	0019      	movs	r1, r3
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	400a      	ands	r2, r1
 8000942:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp;
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	68d9      	ldr	r1, [r3, #12]
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	681b      	ldr	r3, [r3, #0]
 800094e:	697a      	ldr	r2, [r7, #20]
 8000950:	430a      	orrs	r2, r1
 8000952:	60da      	str	r2, [r3, #12]


	//4. configure the optype
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber );
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	7a1b      	ldrb	r3, [r3, #8]
 8000958:	001a      	movs	r2, r3
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	791b      	ldrb	r3, [r3, #4]
 800095e:	409a      	lsls	r2, r3
 8000960:	0013      	movs	r3, r2
 8000962:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OTYPER &= ~( 0x1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); //clearing
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	685a      	ldr	r2, [r3, #4]
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	791b      	ldrb	r3, [r3, #4]
 800096e:	0019      	movs	r1, r3
 8000970:	2301      	movs	r3, #1
 8000972:	408b      	lsls	r3, r1
 8000974:	43db      	mvns	r3, r3
 8000976:	0019      	movs	r1, r3
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	400a      	ands	r2, r1
 800097e:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER |= temp;
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	6859      	ldr	r1, [r3, #4]
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	681b      	ldr	r3, [r3, #0]
 800098a:	697a      	ldr	r2, [r7, #20]
 800098c:	430a      	orrs	r2, r1
 800098e:	605a      	str	r2, [r3, #4]

	//5. configure the alt functionality
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN)
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	795b      	ldrb	r3, [r3, #5]
 8000994:	2b02      	cmp	r3, #2
 8000996:	d13b      	bne.n	8000a10 <GPIO_Init+0x2ec>
	{
		//configure the alt function registers.
		uint8_t temp1, temp2;

		temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 8;
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	791a      	ldrb	r2, [r3, #4]
 800099c:	2410      	movs	r4, #16
 800099e:	193b      	adds	r3, r7, r4
 80009a0:	08d2      	lsrs	r2, r2, #3
 80009a2:	701a      	strb	r2, [r3, #0]
		temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber  % 8;
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	791a      	ldrb	r2, [r3, #4]
 80009a8:	250f      	movs	r5, #15
 80009aa:	197b      	adds	r3, r7, r5
 80009ac:	2107      	movs	r1, #7
 80009ae:	400a      	ands	r2, r1
 80009b0:	701a      	strb	r2, [r3, #0]
		pGPIOHandle->pGPIOx->AFR[temp1] &= ~(0xF << ( 4 * temp2 ) ); //clearing
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	681b      	ldr	r3, [r3, #0]
 80009b6:	193a      	adds	r2, r7, r4
 80009b8:	7812      	ldrb	r2, [r2, #0]
 80009ba:	3208      	adds	r2, #8
 80009bc:	0092      	lsls	r2, r2, #2
 80009be:	58d1      	ldr	r1, [r2, r3]
 80009c0:	197b      	adds	r3, r7, r5
 80009c2:	781b      	ldrb	r3, [r3, #0]
 80009c4:	009b      	lsls	r3, r3, #2
 80009c6:	220f      	movs	r2, #15
 80009c8:	409a      	lsls	r2, r3
 80009ca:	0013      	movs	r3, r2
 80009cc:	43db      	mvns	r3, r3
 80009ce:	0018      	movs	r0, r3
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	193a      	adds	r2, r7, r4
 80009d6:	7812      	ldrb	r2, [r2, #0]
 80009d8:	4001      	ands	r1, r0
 80009da:	3208      	adds	r2, #8
 80009dc:	0092      	lsls	r2, r2, #2
 80009de:	50d1      	str	r1, [r2, r3]
		pGPIOHandle->pGPIOx->AFR[temp1] |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << ( 4 * temp2 ) );
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	193a      	adds	r2, r7, r4
 80009e6:	7812      	ldrb	r2, [r2, #0]
 80009e8:	3208      	adds	r2, #8
 80009ea:	0092      	lsls	r2, r2, #2
 80009ec:	58d1      	ldr	r1, [r2, r3]
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	7a5b      	ldrb	r3, [r3, #9]
 80009f2:	001a      	movs	r2, r3
 80009f4:	197b      	adds	r3, r7, r5
 80009f6:	781b      	ldrb	r3, [r3, #0]
 80009f8:	009b      	lsls	r3, r3, #2
 80009fa:	409a      	lsls	r2, r3
 80009fc:	0013      	movs	r3, r2
 80009fe:	0018      	movs	r0, r3
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	193a      	adds	r2, r7, r4
 8000a06:	7812      	ldrb	r2, [r2, #0]
 8000a08:	4301      	orrs	r1, r0
 8000a0a:	3208      	adds	r2, #8
 8000a0c:	0092      	lsls	r2, r2, #2
 8000a0e:	50d1      	str	r1, [r2, r3]
	}

}
 8000a10:	46c0      	nop			; (mov r8, r8)
 8000a12:	46bd      	mov	sp, r7
 8000a14:	b006      	add	sp, #24
 8000a16:	bdb0      	pop	{r4, r5, r7, pc}
 8000a18:	40010400 	.word	0x40010400
 8000a1c:	48000400 	.word	0x48000400
 8000a20:	48000800 	.word	0x48000800
 8000a24:	48000c00 	.word	0x48000c00
 8000a28:	48001400 	.word	0x48001400
 8000a2c:	40021000 	.word	0x40021000
 8000a30:	40010000 	.word	0x40010000

08000a34 <GPIO_WriteToOutputPin>:
 * @return            -
 *
 * @Note              -
 */
void GPIO_WriteToOutputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber, uint8_t Value)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b082      	sub	sp, #8
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	6078      	str	r0, [r7, #4]
 8000a3c:	0008      	movs	r0, r1
 8000a3e:	0011      	movs	r1, r2
 8000a40:	1cfb      	adds	r3, r7, #3
 8000a42:	1c02      	adds	r2, r0, #0
 8000a44:	701a      	strb	r2, [r3, #0]
 8000a46:	1cbb      	adds	r3, r7, #2
 8000a48:	1c0a      	adds	r2, r1, #0
 8000a4a:	701a      	strb	r2, [r3, #0]

	if(Value == GPIO_PIN_SET)
 8000a4c:	1cbb      	adds	r3, r7, #2
 8000a4e:	781b      	ldrb	r3, [r3, #0]
 8000a50:	2b01      	cmp	r3, #1
 8000a52:	d10a      	bne.n	8000a6a <GPIO_WriteToOutputPin+0x36>
	{
		//write 1 to the output data register at the bit field corresponding to the pin number
		pGPIOx->ODR |= ( 1 << PinNumber);
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	695b      	ldr	r3, [r3, #20]
 8000a58:	1cfa      	adds	r2, r7, #3
 8000a5a:	7812      	ldrb	r2, [r2, #0]
 8000a5c:	2101      	movs	r1, #1
 8000a5e:	4091      	lsls	r1, r2
 8000a60:	000a      	movs	r2, r1
 8000a62:	431a      	orrs	r2, r3
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	615a      	str	r2, [r3, #20]
	}else
	{
		//write 0
		pGPIOx->ODR &= ~( 1 << PinNumber);
	}
}
 8000a68:	e00a      	b.n	8000a80 <GPIO_WriteToOutputPin+0x4c>
		pGPIOx->ODR &= ~( 1 << PinNumber);
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	695b      	ldr	r3, [r3, #20]
 8000a6e:	1cfa      	adds	r2, r7, #3
 8000a70:	7812      	ldrb	r2, [r2, #0]
 8000a72:	2101      	movs	r1, #1
 8000a74:	4091      	lsls	r1, r2
 8000a76:	000a      	movs	r2, r1
 8000a78:	43d2      	mvns	r2, r2
 8000a7a:	401a      	ands	r2, r3
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	615a      	str	r2, [r3, #20]
}
 8000a80:	46c0      	nop			; (mov r8, r8)
 8000a82:	46bd      	mov	sp, r7
 8000a84:	b002      	add	sp, #8
 8000a86:	bd80      	pop	{r7, pc}

08000a88 <RTC_Init>:
static uint8_t binary_to_bcd(uint8_t value);



void RTC_Init(void)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	af00      	add	r7, sp, #0
	          RCC->APB1ENR |= (1 << 28);                           //peripheral clock enable for power control register(PWR)
 8000a8c:	4b1d      	ldr	r3, [pc, #116]	; (8000b04 <RTC_Init+0x7c>)
 8000a8e:	69da      	ldr	r2, [r3, #28]
 8000a90:	4b1c      	ldr	r3, [pc, #112]	; (8000b04 <RTC_Init+0x7c>)
 8000a92:	2180      	movs	r1, #128	; 0x80
 8000a94:	0549      	lsls	r1, r1, #21
 8000a96:	430a      	orrs	r2, r1
 8000a98:	61da      	str	r2, [r3, #28]
			  PWR -> CR |= PWR_CR_DBP;                             //DBP Set for RTC registers write access
 8000a9a:	4b1b      	ldr	r3, [pc, #108]	; (8000b08 <RTC_Init+0x80>)
 8000a9c:	681a      	ldr	r2, [r3, #0]
 8000a9e:	4b1a      	ldr	r3, [pc, #104]	; (8000b08 <RTC_Init+0x80>)
 8000aa0:	2180      	movs	r1, #128	; 0x80
 8000aa2:	0049      	lsls	r1, r1, #1
 8000aa4:	430a      	orrs	r2, r1
 8000aa6:	601a      	str	r2, [r3, #0]

			 /* clock selection in RCC. enable to operate RTC */
			  RCC->CSR |= 1<<0;                                    //LSI Clock enable
 8000aa8:	4b16      	ldr	r3, [pc, #88]	; (8000b04 <RTC_Init+0x7c>)
 8000aaa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000aac:	4b15      	ldr	r3, [pc, #84]	; (8000b04 <RTC_Init+0x7c>)
 8000aae:	2101      	movs	r1, #1
 8000ab0:	430a      	orrs	r2, r1
 8000ab2:	625a      	str	r2, [r3, #36]	; 0x24

			 /*RTC clock source selection in RCC_CSR Register*/
			  RCC->BDCR |= 2<<8;                                   //LSI Clock selection for RTC
 8000ab4:	4b13      	ldr	r3, [pc, #76]	; (8000b04 <RTC_Init+0x7c>)
 8000ab6:	6a1a      	ldr	r2, [r3, #32]
 8000ab8:	4b12      	ldr	r3, [pc, #72]	; (8000b04 <RTC_Init+0x7c>)
 8000aba:	2180      	movs	r1, #128	; 0x80
 8000abc:	0089      	lsls	r1, r1, #2
 8000abe:	430a      	orrs	r2, r1
 8000ac0:	621a      	str	r2, [r3, #32]

			 /*RTC clock enable*/
			  RCC->BDCR |= 1<<15;
 8000ac2:	4b10      	ldr	r3, [pc, #64]	; (8000b04 <RTC_Init+0x7c>)
 8000ac4:	6a1a      	ldr	r2, [r3, #32]
 8000ac6:	4b0f      	ldr	r3, [pc, #60]	; (8000b04 <RTC_Init+0x7c>)
 8000ac8:	2180      	movs	r1, #128	; 0x80
 8000aca:	0209      	lsls	r1, r1, #8
 8000acc:	430a      	orrs	r2, r1
 8000ace:	621a      	str	r2, [r3, #32]

			 /*Write access for RTC registers */
			  RTC->WPR = 0xCA;
 8000ad0:	4b0e      	ldr	r3, [pc, #56]	; (8000b0c <RTC_Init+0x84>)
 8000ad2:	22ca      	movs	r2, #202	; 0xca
 8000ad4:	625a      	str	r2, [r3, #36]	; 0x24
			  RTC->WPR = 0x53;
 8000ad6:	4b0d      	ldr	r3, [pc, #52]	; (8000b0c <RTC_Init+0x84>)
 8000ad8:	2253      	movs	r2, #83	; 0x53
 8000ada:	625a      	str	r2, [r3, #36]	; 0x24

			 /*Enable init phase */
			  RTC->ISR |= RTC_ISR_INIT;
 8000adc:	4b0b      	ldr	r3, [pc, #44]	; (8000b0c <RTC_Init+0x84>)
 8000ade:	68da      	ldr	r2, [r3, #12]
 8000ae0:	4b0a      	ldr	r3, [pc, #40]	; (8000b0c <RTC_Init+0x84>)
 8000ae2:	2180      	movs	r1, #128	; 0x80
 8000ae4:	430a      	orrs	r2, r1
 8000ae6:	60da      	str	r2, [r3, #12]

			 /*Wait until it is allow to modify RTC register values */
			  while ((RTC->ISR & RTC_ISR_INITF) != RTC_ISR_INITF)
 8000ae8:	46c0      	nop			; (mov r8, r8)
 8000aea:	4b08      	ldr	r3, [pc, #32]	; (8000b0c <RTC_Init+0x84>)
 8000aec:	68db      	ldr	r3, [r3, #12]
 8000aee:	2240      	movs	r2, #64	; 0x40
 8000af0:	4013      	ands	r3, r2
 8000af2:	2b40      	cmp	r3, #64	; 0x40
 8000af4:	d1f9      	bne.n	8000aea <RTC_Init+0x62>
			 	  {
			 	  /* add time out here for a robust application */
			 	  }

			 /*set prescaler, 40kHz/128 => 312 Hz, 312Hz/312 => 1Hz */
			  RTC->PRER = 0x007F0137;
 8000af6:	4b05      	ldr	r3, [pc, #20]	; (8000b0c <RTC_Init+0x84>)
 8000af8:	4a05      	ldr	r2, [pc, #20]	; (8000b10 <RTC_Init+0x88>)
 8000afa:	611a      	str	r2, [r3, #16]
}
 8000afc:	46c0      	nop			; (mov r8, r8)
 8000afe:	46bd      	mov	sp, r7
 8000b00:	bd80      	pop	{r7, pc}
 8000b02:	46c0      	nop			; (mov r8, r8)
 8000b04:	40021000 	.word	0x40021000
 8000b08:	40007000 	.word	0x40007000
 8000b0c:	40002800 	.word	0x40002800
 8000b10:	007f0137 	.word	0x007f0137

08000b14 <RTC_Set_Time>:

void RTC_Set_Time(RTC_Time *T, int time_format)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b086      	sub	sp, #24
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]
 8000b1c:	6039      	str	r1, [r7, #0]
	int hrs,mnts,ses;
	uint32_t t;
	hrs = binary_to_bcd(T->hour);
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	685b      	ldr	r3, [r3, #4]
 8000b22:	b2db      	uxtb	r3, r3
 8000b24:	0018      	movs	r0, r3
 8000b26:	f000 f927 	bl	8000d78 <binary_to_bcd>
 8000b2a:	0003      	movs	r3, r0
 8000b2c:	617b      	str	r3, [r7, #20]
	mnts = binary_to_bcd(T->min);
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	689b      	ldr	r3, [r3, #8]
 8000b32:	b2db      	uxtb	r3, r3
 8000b34:	0018      	movs	r0, r3
 8000b36:	f000 f91f 	bl	8000d78 <binary_to_bcd>
 8000b3a:	0003      	movs	r3, r0
 8000b3c:	613b      	str	r3, [r7, #16]
	ses = binary_to_bcd(T->seconds);
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	68db      	ldr	r3, [r3, #12]
 8000b42:	b2db      	uxtb	r3, r3
 8000b44:	0018      	movs	r0, r3
 8000b46:	f000 f917 	bl	8000d78 <binary_to_bcd>
 8000b4a:	0003      	movs	r3, r0
 8000b4c:	60fb      	str	r3, [r7, #12]
	t = hrs<< 16 |mnts << 8| ses << 0;
 8000b4e:	697b      	ldr	r3, [r7, #20]
 8000b50:	041a      	lsls	r2, r3, #16
 8000b52:	693b      	ldr	r3, [r7, #16]
 8000b54:	021b      	lsls	r3, r3, #8
 8000b56:	431a      	orrs	r2, r3
 8000b58:	68fb      	ldr	r3, [r7, #12]
 8000b5a:	4313      	orrs	r3, r2
 8000b5c:	60bb      	str	r3, [r7, #8]
	RTC -> TR = t ;// time
 8000b5e:	4b03      	ldr	r3, [pc, #12]	; (8000b6c <RTC_Set_Time+0x58>)
 8000b60:	68ba      	ldr	r2, [r7, #8]
 8000b62:	601a      	str	r2, [r3, #0]
}
 8000b64:	46c0      	nop			; (mov r8, r8)
 8000b66:	46bd      	mov	sp, r7
 8000b68:	b006      	add	sp, #24
 8000b6a:	bd80      	pop	{r7, pc}
 8000b6c:	40002800 	.word	0x40002800

08000b70 <RTC_Set_Date>:
void RTC_Set_Date(RTC_Date *D)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b088      	sub	sp, #32
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	6078      	str	r0, [r7, #4]
	int yrs,wd,mnts,dte;
	uint32_t d;
	D->year = D -> year - 2000;
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	689b      	ldr	r3, [r3, #8]
 8000b7c:	4a18      	ldr	r2, [pc, #96]	; (8000be0 <RTC_Set_Date+0x70>)
 8000b7e:	189a      	adds	r2, r3, r2
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	609a      	str	r2, [r3, #8]
	yrs = binary_to_bcd(D->year);
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	689b      	ldr	r3, [r3, #8]
 8000b88:	b2db      	uxtb	r3, r3
 8000b8a:	0018      	movs	r0, r3
 8000b8c:	f000 f8f4 	bl	8000d78 <binary_to_bcd>
 8000b90:	0003      	movs	r3, r0
 8000b92:	61fb      	str	r3, [r7, #28]
    wd = D->week_day;
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	68db      	ldr	r3, [r3, #12]
 8000b98:	61bb      	str	r3, [r7, #24]
    mnts = binary_to_bcd(D->month);
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	685b      	ldr	r3, [r3, #4]
 8000b9e:	b2db      	uxtb	r3, r3
 8000ba0:	0018      	movs	r0, r3
 8000ba2:	f000 f8e9 	bl	8000d78 <binary_to_bcd>
 8000ba6:	0003      	movs	r3, r0
 8000ba8:	617b      	str	r3, [r7, #20]
    dte = binary_to_bcd(D->day);
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	b2db      	uxtb	r3, r3
 8000bb0:	0018      	movs	r0, r3
 8000bb2:	f000 f8e1 	bl	8000d78 <binary_to_bcd>
 8000bb6:	0003      	movs	r3, r0
 8000bb8:	613b      	str	r3, [r7, #16]

	d =  yrs << 16 | wd << 13  | mnts << 8  | dte << 0;
 8000bba:	69fb      	ldr	r3, [r7, #28]
 8000bbc:	041a      	lsls	r2, r3, #16
 8000bbe:	69bb      	ldr	r3, [r7, #24]
 8000bc0:	035b      	lsls	r3, r3, #13
 8000bc2:	431a      	orrs	r2, r3
 8000bc4:	697b      	ldr	r3, [r7, #20]
 8000bc6:	021b      	lsls	r3, r3, #8
 8000bc8:	431a      	orrs	r2, r3
 8000bca:	693b      	ldr	r3, [r7, #16]
 8000bcc:	4313      	orrs	r3, r2
 8000bce:	60fb      	str	r3, [r7, #12]
	RTC -> DR = d ;// time
 8000bd0:	4b04      	ldr	r3, [pc, #16]	; (8000be4 <RTC_Set_Date+0x74>)
 8000bd2:	68fa      	ldr	r2, [r7, #12]
 8000bd4:	605a      	str	r2, [r3, #4]

}
 8000bd6:	46c0      	nop			; (mov r8, r8)
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	b008      	add	sp, #32
 8000bdc:	bd80      	pop	{r7, pc}
 8000bde:	46c0      	nop			; (mov r8, r8)
 8000be0:	fffff830 	.word	0xfffff830
 8000be4:	40002800 	.word	0x40002800

08000be8 <RTC_Start>:
void RTC_Start(void)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	af00      	add	r7, sp, #0
	RTC -> CR |= RTC_CR_FMT | RTC_CR_TSE; //Configure the time format
 8000bec:	4b0c      	ldr	r3, [pc, #48]	; (8000c20 <RTC_Start+0x38>)
 8000bee:	689a      	ldr	r2, [r3, #8]
 8000bf0:	4b0b      	ldr	r3, [pc, #44]	; (8000c20 <RTC_Start+0x38>)
 8000bf2:	2184      	movs	r1, #132	; 0x84
 8000bf4:	0109      	lsls	r1, r1, #4
 8000bf6:	430a      	orrs	r2, r1
 8000bf8:	609a      	str	r2, [r3, #8]
	RTC -> ISR &= ~RTC_ISR_INIT; //Exit initialization mode.
 8000bfa:	4b09      	ldr	r3, [pc, #36]	; (8000c20 <RTC_Start+0x38>)
 8000bfc:	68da      	ldr	r2, [r3, #12]
 8000bfe:	4b08      	ldr	r3, [pc, #32]	; (8000c20 <RTC_Start+0x38>)
 8000c00:	2180      	movs	r1, #128	; 0x80
 8000c02:	438a      	bics	r2, r1
 8000c04:	60da      	str	r2, [r3, #12]
	RTC -> WPR = 0xFF;
 8000c06:	4b06      	ldr	r3, [pc, #24]	; (8000c20 <RTC_Start+0x38>)
 8000c08:	22ff      	movs	r2, #255	; 0xff
 8000c0a:	625a      	str	r2, [r3, #36]	; 0x24
	PWR -> CR &= ~PWR_CR_DBP;
 8000c0c:	4b05      	ldr	r3, [pc, #20]	; (8000c24 <RTC_Start+0x3c>)
 8000c0e:	681a      	ldr	r2, [r3, #0]
 8000c10:	4b04      	ldr	r3, [pc, #16]	; (8000c24 <RTC_Start+0x3c>)
 8000c12:	4905      	ldr	r1, [pc, #20]	; (8000c28 <RTC_Start+0x40>)
 8000c14:	400a      	ands	r2, r1
 8000c16:	601a      	str	r2, [r3, #0]
}
 8000c18:	46c0      	nop			; (mov r8, r8)
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	bd80      	pop	{r7, pc}
 8000c1e:	46c0      	nop			; (mov r8, r8)
 8000c20:	40002800 	.word	0x40002800
 8000c24:	40007000 	.word	0x40007000
 8000c28:	fffffeff 	.word	0xfffffeff

08000c2c <RTC_Get_Time>:

void RTC_Get_Time(RTC_Time *T)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b08c      	sub	sp, #48	; 0x30
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
	int hour_tens, hour_unit;
	int mins_tens, mins_unit;
	int second_tens, second_unit;
	int seconds, mins, hour;

	t = RTC -> TR;
 8000c34:	4b26      	ldr	r3, [pc, #152]	; (8000cd0 <RTC_Get_Time+0xa4>)
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	62fb      	str	r3, [r7, #44]	; 0x2c
	hour_tens = (t & 0x300000)>>20;
 8000c3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c3c:	0d1b      	lsrs	r3, r3, #20
 8000c3e:	001a      	movs	r2, r3
 8000c40:	2303      	movs	r3, #3
 8000c42:	4013      	ands	r3, r2
 8000c44:	62bb      	str	r3, [r7, #40]	; 0x28
	hour_unit = (t & 0xF0000)>>16;
 8000c46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c48:	0c1b      	lsrs	r3, r3, #16
 8000c4a:	001a      	movs	r2, r3
 8000c4c:	230f      	movs	r3, #15
 8000c4e:	4013      	ands	r3, r2
 8000c50:	627b      	str	r3, [r7, #36]	; 0x24
	mins_tens = (t & 0x7000)>>12;
 8000c52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c54:	0b1b      	lsrs	r3, r3, #12
 8000c56:	001a      	movs	r2, r3
 8000c58:	2307      	movs	r3, #7
 8000c5a:	4013      	ands	r3, r2
 8000c5c:	623b      	str	r3, [r7, #32]
	mins_unit = (t & 0xf00) >> 8;
 8000c5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c60:	0a1b      	lsrs	r3, r3, #8
 8000c62:	001a      	movs	r2, r3
 8000c64:	230f      	movs	r3, #15
 8000c66:	4013      	ands	r3, r2
 8000c68:	61fb      	str	r3, [r7, #28]
	second_tens = (t & 0x70) >> 4;
 8000c6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c6c:	091b      	lsrs	r3, r3, #4
 8000c6e:	001a      	movs	r2, r3
 8000c70:	2307      	movs	r3, #7
 8000c72:	4013      	ands	r3, r2
 8000c74:	61bb      	str	r3, [r7, #24]
	second_unit = (t & 0xf);
 8000c76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c78:	220f      	movs	r2, #15
 8000c7a:	4013      	ands	r3, r2
 8000c7c:	617b      	str	r3, [r7, #20]
	hour = (hour_tens * 10) + hour_unit;
 8000c7e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000c80:	0013      	movs	r3, r2
 8000c82:	009b      	lsls	r3, r3, #2
 8000c84:	189b      	adds	r3, r3, r2
 8000c86:	005b      	lsls	r3, r3, #1
 8000c88:	001a      	movs	r2, r3
 8000c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c8c:	189b      	adds	r3, r3, r2
 8000c8e:	613b      	str	r3, [r7, #16]
	mins = (mins_tens * 10) + mins_unit;
 8000c90:	6a3a      	ldr	r2, [r7, #32]
 8000c92:	0013      	movs	r3, r2
 8000c94:	009b      	lsls	r3, r3, #2
 8000c96:	189b      	adds	r3, r3, r2
 8000c98:	005b      	lsls	r3, r3, #1
 8000c9a:	001a      	movs	r2, r3
 8000c9c:	69fb      	ldr	r3, [r7, #28]
 8000c9e:	189b      	adds	r3, r3, r2
 8000ca0:	60fb      	str	r3, [r7, #12]
	seconds = (second_tens * 10) + second_unit;
 8000ca2:	69ba      	ldr	r2, [r7, #24]
 8000ca4:	0013      	movs	r3, r2
 8000ca6:	009b      	lsls	r3, r3, #2
 8000ca8:	189b      	adds	r3, r3, r2
 8000caa:	005b      	lsls	r3, r3, #1
 8000cac:	001a      	movs	r2, r3
 8000cae:	697b      	ldr	r3, [r7, #20]
 8000cb0:	189b      	adds	r3, r3, r2
 8000cb2:	60bb      	str	r3, [r7, #8]
	T->hour = hour;
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	693a      	ldr	r2, [r7, #16]
 8000cb8:	605a      	str	r2, [r3, #4]
	T->min = mins;
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	68fa      	ldr	r2, [r7, #12]
 8000cbe:	609a      	str	r2, [r3, #8]
	T->seconds = seconds;
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	68ba      	ldr	r2, [r7, #8]
 8000cc4:	60da      	str	r2, [r3, #12]
}
 8000cc6:	46c0      	nop			; (mov r8, r8)
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	b00c      	add	sp, #48	; 0x30
 8000ccc:	bd80      	pop	{r7, pc}
 8000cce:	46c0      	nop			; (mov r8, r8)
 8000cd0:	40002800 	.word	0x40002800

08000cd4 <RTC_Get_Date>:



void RTC_Get_Date(RTC_Date *D)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b08c      	sub	sp, #48	; 0x30
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
	int date, datet, dateu;
	int month,montht,monthu;
	int year,yeart,yearu;
	int wd;

	d = RTC -> DR;
 8000cdc:	4b25      	ldr	r3, [pc, #148]	; (8000d74 <RTC_Get_Date+0xa0>)
 8000cde:	685b      	ldr	r3, [r3, #4]
 8000ce0:	62fb      	str	r3, [r7, #44]	; 0x2c

	yeart = (d & 0xf00000) >> 20;
 8000ce2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ce4:	0d1b      	lsrs	r3, r3, #20
 8000ce6:	001a      	movs	r2, r3
 8000ce8:	230f      	movs	r3, #15
 8000cea:	4013      	ands	r3, r2
 8000cec:	62bb      	str	r3, [r7, #40]	; 0x28
	yearu = (d & 0xf0000) >> 16;
 8000cee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000cf0:	0c1b      	lsrs	r3, r3, #16
 8000cf2:	001a      	movs	r2, r3
 8000cf4:	230f      	movs	r3, #15
 8000cf6:	4013      	ands	r3, r2
 8000cf8:	627b      	str	r3, [r7, #36]	; 0x24
	year = 2000 + (yeart * 10) + yearu;
 8000cfa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000cfc:	0013      	movs	r3, r2
 8000cfe:	009b      	lsls	r3, r3, #2
 8000d00:	189b      	adds	r3, r3, r2
 8000d02:	005b      	lsls	r3, r3, #1
 8000d04:	22fa      	movs	r2, #250	; 0xfa
 8000d06:	00d2      	lsls	r2, r2, #3
 8000d08:	4694      	mov	ip, r2
 8000d0a:	4463      	add	r3, ip
 8000d0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000d0e:	18d3      	adds	r3, r2, r3
 8000d10:	623b      	str	r3, [r7, #32]

	montht = (d & 0x1000) >> 12;
 8000d12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d14:	0b1b      	lsrs	r3, r3, #12
 8000d16:	001a      	movs	r2, r3
 8000d18:	2301      	movs	r3, #1
 8000d1a:	4013      	ands	r3, r2
 8000d1c:	61fb      	str	r3, [r7, #28]
	monthu = (d & 0xf00) >> 12;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	61bb      	str	r3, [r7, #24]
	month = (montht * 10) + monthu;
 8000d22:	69fa      	ldr	r2, [r7, #28]
 8000d24:	0013      	movs	r3, r2
 8000d26:	009b      	lsls	r3, r3, #2
 8000d28:	189b      	adds	r3, r3, r2
 8000d2a:	005b      	lsls	r3, r3, #1
 8000d2c:	001a      	movs	r2, r3
 8000d2e:	69bb      	ldr	r3, [r7, #24]
 8000d30:	189b      	adds	r3, r3, r2
 8000d32:	617b      	str	r3, [r7, #20]

	datet = (d & 0x30) >> 4;
 8000d34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d36:	091b      	lsrs	r3, r3, #4
 8000d38:	001a      	movs	r2, r3
 8000d3a:	2303      	movs	r3, #3
 8000d3c:	4013      	ands	r3, r2
 8000d3e:	613b      	str	r3, [r7, #16]
	dateu = (d & 0xf) >> 0;
 8000d40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d42:	220f      	movs	r2, #15
 8000d44:	4013      	ands	r3, r2
 8000d46:	60fb      	str	r3, [r7, #12]
	date = (datet * 10) + dateu;
 8000d48:	693a      	ldr	r2, [r7, #16]
 8000d4a:	0013      	movs	r3, r2
 8000d4c:	009b      	lsls	r3, r3, #2
 8000d4e:	189b      	adds	r3, r3, r2
 8000d50:	005b      	lsls	r3, r3, #1
 8000d52:	001a      	movs	r2, r3
 8000d54:	68fb      	ldr	r3, [r7, #12]
 8000d56:	189b      	adds	r3, r3, r2
 8000d58:	60bb      	str	r3, [r7, #8]

D -> day = date;
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	68ba      	ldr	r2, [r7, #8]
 8000d5e:	601a      	str	r2, [r3, #0]
D -> month = month;
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	697a      	ldr	r2, [r7, #20]
 8000d64:	605a      	str	r2, [r3, #4]
D -> year = year;
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	6a3a      	ldr	r2, [r7, #32]
 8000d6a:	609a      	str	r2, [r3, #8]
}
 8000d6c:	46c0      	nop			; (mov r8, r8)
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	b00c      	add	sp, #48	; 0x30
 8000d72:	bd80      	pop	{r7, pc}
 8000d74:	40002800 	.word	0x40002800

08000d78 <binary_to_bcd>:


static uint8_t binary_to_bcd(uint8_t value)
{
 8000d78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d7a:	b085      	sub	sp, #20
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	0002      	movs	r2, r0
 8000d80:	1dfb      	adds	r3, r7, #7
 8000d82:	701a      	strb	r2, [r3, #0]
	uint8_t m , n;
	uint8_t bcd;

	bcd = value;
 8000d84:	250f      	movs	r5, #15
 8000d86:	197b      	adds	r3, r7, r5
 8000d88:	1dfa      	adds	r2, r7, #7
 8000d8a:	7812      	ldrb	r2, [r2, #0]
 8000d8c:	701a      	strb	r2, [r3, #0]
	if(value >= 10)
 8000d8e:	1dfb      	adds	r3, r7, #7
 8000d90:	781b      	ldrb	r3, [r3, #0]
 8000d92:	2b09      	cmp	r3, #9
 8000d94:	d91f      	bls.n	8000dd6 <binary_to_bcd+0x5e>
	{
		m = value /10;
 8000d96:	260e      	movs	r6, #14
 8000d98:	19bc      	adds	r4, r7, r6
 8000d9a:	1dfb      	adds	r3, r7, #7
 8000d9c:	781b      	ldrb	r3, [r3, #0]
 8000d9e:	210a      	movs	r1, #10
 8000da0:	0018      	movs	r0, r3
 8000da2:	f7ff f9bb 	bl	800011c <__udivsi3>
 8000da6:	0003      	movs	r3, r0
 8000da8:	7023      	strb	r3, [r4, #0]
		n = value % 10;
 8000daa:	230d      	movs	r3, #13
 8000dac:	18fc      	adds	r4, r7, r3
 8000dae:	1dfb      	adds	r3, r7, #7
 8000db0:	781b      	ldrb	r3, [r3, #0]
 8000db2:	210a      	movs	r1, #10
 8000db4:	0018      	movs	r0, r3
 8000db6:	f7ff fa37 	bl	8000228 <__aeabi_uidivmod>
 8000dba:	000b      	movs	r3, r1
 8000dbc:	7023      	strb	r3, [r4, #0]
		bcd = (m << 4) | n ;
 8000dbe:	19bb      	adds	r3, r7, r6
 8000dc0:	781b      	ldrb	r3, [r3, #0]
 8000dc2:	011b      	lsls	r3, r3, #4
 8000dc4:	b25a      	sxtb	r2, r3
 8000dc6:	230d      	movs	r3, #13
 8000dc8:	18fb      	adds	r3, r7, r3
 8000dca:	781b      	ldrb	r3, [r3, #0]
 8000dcc:	b25b      	sxtb	r3, r3
 8000dce:	4313      	orrs	r3, r2
 8000dd0:	b25a      	sxtb	r2, r3
 8000dd2:	197b      	adds	r3, r7, r5
 8000dd4:	701a      	strb	r2, [r3, #0]
	}

	return bcd;
 8000dd6:	230f      	movs	r3, #15
 8000dd8:	18fb      	adds	r3, r7, r3
 8000dda:	781b      	ldrb	r3, [r3, #0]
}
 8000ddc:	0018      	movs	r0, r3
 8000dde:	46bd      	mov	sp, r7
 8000de0:	b005      	add	sp, #20
 8000de2:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000de4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b086      	sub	sp, #24
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000dec:	4a14      	ldr	r2, [pc, #80]	; (8000e40 <_sbrk+0x5c>)
 8000dee:	4b15      	ldr	r3, [pc, #84]	; (8000e44 <_sbrk+0x60>)
 8000df0:	1ad3      	subs	r3, r2, r3
 8000df2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000df4:	697b      	ldr	r3, [r7, #20]
 8000df6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000df8:	4b13      	ldr	r3, [pc, #76]	; (8000e48 <_sbrk+0x64>)
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d102      	bne.n	8000e06 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e00:	4b11      	ldr	r3, [pc, #68]	; (8000e48 <_sbrk+0x64>)
 8000e02:	4a12      	ldr	r2, [pc, #72]	; (8000e4c <_sbrk+0x68>)
 8000e04:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e06:	4b10      	ldr	r3, [pc, #64]	; (8000e48 <_sbrk+0x64>)
 8000e08:	681a      	ldr	r2, [r3, #0]
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	18d3      	adds	r3, r2, r3
 8000e0e:	693a      	ldr	r2, [r7, #16]
 8000e10:	429a      	cmp	r2, r3
 8000e12:	d207      	bcs.n	8000e24 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e14:	f000 f8dc 	bl	8000fd0 <__errno>
 8000e18:	0003      	movs	r3, r0
 8000e1a:	220c      	movs	r2, #12
 8000e1c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e1e:	2301      	movs	r3, #1
 8000e20:	425b      	negs	r3, r3
 8000e22:	e009      	b.n	8000e38 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e24:	4b08      	ldr	r3, [pc, #32]	; (8000e48 <_sbrk+0x64>)
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e2a:	4b07      	ldr	r3, [pc, #28]	; (8000e48 <_sbrk+0x64>)
 8000e2c:	681a      	ldr	r2, [r3, #0]
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	18d2      	adds	r2, r2, r3
 8000e32:	4b05      	ldr	r3, [pc, #20]	; (8000e48 <_sbrk+0x64>)
 8000e34:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8000e36:	68fb      	ldr	r3, [r7, #12]
}
 8000e38:	0018      	movs	r0, r3
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	b006      	add	sp, #24
 8000e3e:	bd80      	pop	{r7, pc}
 8000e40:	20002000 	.word	0x20002000
 8000e44:	00000400 	.word	0x00000400
 8000e48:	20000080 	.word	0x20000080
 8000e4c:	200000b0 	.word	0x200000b0

08000e50 <mdelay>:
#define SYSTICK_TIM_CLK   8000000UL



static void mdelay(uint32_t cnt)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b084      	sub	sp, #16
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
	for(uint32_t i=0 ; i < (cnt * 1000); i++);
 8000e58:	2300      	movs	r3, #0
 8000e5a:	60fb      	str	r3, [r7, #12]
 8000e5c:	e002      	b.n	8000e64 <mdelay+0x14>
 8000e5e:	68fb      	ldr	r3, [r7, #12]
 8000e60:	3301      	adds	r3, #1
 8000e62:	60fb      	str	r3, [r7, #12]
 8000e64:	687a      	ldr	r2, [r7, #4]
 8000e66:	0013      	movs	r3, r2
 8000e68:	015b      	lsls	r3, r3, #5
 8000e6a:	1a9b      	subs	r3, r3, r2
 8000e6c:	009b      	lsls	r3, r3, #2
 8000e6e:	189b      	adds	r3, r3, r2
 8000e70:	00db      	lsls	r3, r3, #3
 8000e72:	001a      	movs	r2, r3
 8000e74:	68fb      	ldr	r3, [r7, #12]
 8000e76:	4293      	cmp	r3, r2
 8000e78:	d3f1      	bcc.n	8000e5e <mdelay+0xe>
}
 8000e7a:	46c0      	nop			; (mov r8, r8)
 8000e7c:	46c0      	nop			; (mov r8, r8)
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	b004      	add	sp, #16
 8000e82:	bd80      	pop	{r7, pc}

08000e84 <get_time>:

}



void get_time(void){
 8000e84:	b590      	push	{r4, r7, lr}
 8000e86:	b08d      	sub	sp, #52	; 0x34
 8000e88:	af02      	add	r7, sp, #8

	 RTC_Time X;
	 RTC_Date Y;
	 RTC_Get_Time(&X);
 8000e8a:	2414      	movs	r4, #20
 8000e8c:	193b      	adds	r3, r7, r4
 8000e8e:	0018      	movs	r0, r3
 8000e90:	f7ff fecc 	bl	8000c2c <RTC_Get_Time>
	 RTC_Get_Date(&Y);
 8000e94:	1d3b      	adds	r3, r7, #4
 8000e96:	0018      	movs	r0, r3
 8000e98:	f7ff ff1c 	bl	8000cd4 <RTC_Get_Date>

	sprintf((char*)time,"%02d:%02d:%02d",X.hour,X.min,X.seconds);
 8000e9c:	0021      	movs	r1, r4
 8000e9e:	187b      	adds	r3, r7, r1
 8000ea0:	685a      	ldr	r2, [r3, #4]
 8000ea2:	187b      	adds	r3, r7, r1
 8000ea4:	689c      	ldr	r4, [r3, #8]
 8000ea6:	187b      	adds	r3, r7, r1
 8000ea8:	68db      	ldr	r3, [r3, #12]
 8000eaa:	490b      	ldr	r1, [pc, #44]	; (8000ed8 <get_time+0x54>)
 8000eac:	480b      	ldr	r0, [pc, #44]	; (8000edc <get_time+0x58>)
 8000eae:	9300      	str	r3, [sp, #0]
 8000eb0:	0023      	movs	r3, r4
 8000eb2:	f000 f8b7 	bl	8001024 <siprintf>
	sprintf((char*)date,"%02d-%02d-%02d",Y.day,Y.month, Y.year );
 8000eb6:	1d3b      	adds	r3, r7, #4
 8000eb8:	681a      	ldr	r2, [r3, #0]
 8000eba:	1d3b      	adds	r3, r7, #4
 8000ebc:	685c      	ldr	r4, [r3, #4]
 8000ebe:	1d3b      	adds	r3, r7, #4
 8000ec0:	689b      	ldr	r3, [r3, #8]
 8000ec2:	4907      	ldr	r1, [pc, #28]	; (8000ee0 <get_time+0x5c>)
 8000ec4:	4807      	ldr	r0, [pc, #28]	; (8000ee4 <get_time+0x60>)
 8000ec6:	9300      	str	r3, [sp, #0]
 8000ec8:	0023      	movs	r3, r4
 8000eca:	f000 f8ab 	bl	8001024 <siprintf>

}
 8000ece:	46c0      	nop			; (mov r8, r8)
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	b00b      	add	sp, #44	; 0x2c
 8000ed4:	bd90      	pop	{r4, r7, pc}
 8000ed6:	46c0      	nop			; (mov r8, r8)
 8000ed8:	08001910 	.word	0x08001910
 8000edc:	20000084 	.word	0x20000084
 8000ee0:	08001920 	.word	0x08001920
 8000ee4:	20000090 	.word	0x20000090

08000ee8 <main>:


int main()
{
 8000ee8:	b590      	push	{r4, r7, lr}
 8000eea:	b08b      	sub	sp, #44	; 0x2c
 8000eec:	af00      	add	r7, sp, #0



	    RTC_Time X;
		X.am_pm = 1;
 8000eee:	2414      	movs	r4, #20
 8000ef0:	193b      	adds	r3, r7, r4
 8000ef2:	2201      	movs	r2, #1
 8000ef4:	601a      	str	r2, [r3, #0]
		X.hour = 6;
 8000ef6:	193b      	adds	r3, r7, r4
 8000ef8:	2206      	movs	r2, #6
 8000efa:	605a      	str	r2, [r3, #4]
		X.min = 53;
 8000efc:	193b      	adds	r3, r7, r4
 8000efe:	2235      	movs	r2, #53	; 0x35
 8000f00:	609a      	str	r2, [r3, #8]
		X.seconds = 48;
 8000f02:	193b      	adds	r3, r7, r4
 8000f04:	2230      	movs	r2, #48	; 0x30
 8000f06:	60da      	str	r2, [r3, #12]

		RTC_Date Y;
		Y.day = 05;
 8000f08:	1d3b      	adds	r3, r7, #4
 8000f0a:	2205      	movs	r2, #5
 8000f0c:	601a      	str	r2, [r3, #0]
		Y.month = 01;
 8000f0e:	1d3b      	adds	r3, r7, #4
 8000f10:	2201      	movs	r2, #1
 8000f12:	605a      	str	r2, [r3, #4]
		Y.year = 2022;
 8000f14:	1d3b      	adds	r3, r7, #4
 8000f16:	4a16      	ldr	r2, [pc, #88]	; (8000f70 <main+0x88>)
 8000f18:	609a      	str	r2, [r3, #8]
		Y.week_day = Monday;
 8000f1a:	1d3b      	adds	r3, r7, #4
 8000f1c:	2201      	movs	r2, #1
 8000f1e:	60da      	str	r2, [r3, #12]

		RTC_Init();
 8000f20:	f7ff fdb2 	bl	8000a88 <RTC_Init>
		RTC_Set_Date(&Y);
 8000f24:	1d3b      	adds	r3, r7, #4
 8000f26:	0018      	movs	r0, r3
 8000f28:	f7ff fe22 	bl	8000b70 <RTC_Set_Date>
		RTC_Set_Time(&X, Time_Format_12Hour);
 8000f2c:	193b      	adds	r3, r7, r4
 8000f2e:	2101      	movs	r1, #1
 8000f30:	0018      	movs	r0, r3
 8000f32:	f7ff fdef 	bl	8000b14 <RTC_Set_Time>
		RTC_Start();
 8000f36:	f7ff fe57 	bl	8000be8 <RTC_Start>
		lcd_init();
 8000f3a:	f7ff f9df 	bl	80002fc <lcd_init>



    				 while(1)
    				    {
    					 get_time();
 8000f3e:	f7ff ffa1 	bl	8000e84 <get_time>
    					 lcd_set_cursor(1, 1);
 8000f42:	2101      	movs	r1, #1
 8000f44:	2001      	movs	r0, #1
 8000f46:	f7ff fada 	bl	80004fe <lcd_set_cursor>
    					 lcd_print_string(time);
 8000f4a:	4b0a      	ldr	r3, [pc, #40]	; (8000f74 <main+0x8c>)
 8000f4c:	0018      	movs	r0, r3
 8000f4e:	f7ff f9c1 	bl	80002d4 <lcd_print_string>
                         lcd_set_cursor(2, 1);
 8000f52:	2101      	movs	r1, #1
 8000f54:	2002      	movs	r0, #2
 8000f56:	f7ff fad2 	bl	80004fe <lcd_set_cursor>
    					 lcd_print_string(date);
 8000f5a:	4b07      	ldr	r3, [pc, #28]	; (8000f78 <main+0x90>)
 8000f5c:	0018      	movs	r0, r3
 8000f5e:	f7ff f9b9 	bl	80002d4 <lcd_print_string>
                         mdelay(500);
 8000f62:	23fa      	movs	r3, #250	; 0xfa
 8000f64:	005b      	lsls	r3, r3, #1
 8000f66:	0018      	movs	r0, r3
 8000f68:	f7ff ff72 	bl	8000e50 <mdelay>
    					 get_time();
 8000f6c:	e7e7      	b.n	8000f3e <main+0x56>
 8000f6e:	46c0      	nop			; (mov r8, r8)
 8000f70:	000007e6 	.word	0x000007e6
 8000f74:	20000084 	.word	0x20000084
 8000f78:	20000090 	.word	0x20000090

08000f7c <Reset_Handler>:
  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

  ldr   r0, =_estack
 8000f7c:	480d      	ldr	r0, [pc, #52]	; (8000fb4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000f7e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000f80:	e000      	b.n	8000f84 <Reset_Handler+0x8>
 8000f82:	bf00      	nop

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f84:	480c      	ldr	r0, [pc, #48]	; (8000fb8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000f86:	490d      	ldr	r1, [pc, #52]	; (8000fbc <LoopForever+0xa>)

  ldr r2, =_sidata
 8000f88:	4a0d      	ldr	r2, [pc, #52]	; (8000fc0 <LoopForever+0xe>)
  movs r3, #0
 8000f8a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f8c:	e002      	b.n	8000f94 <LoopCopyDataInit>

08000f8e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f8e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f90:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f92:	3304      	adds	r3, #4

08000f94 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f94:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f96:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f98:	d3f9      	bcc.n	8000f8e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f9a:	4a0a      	ldr	r2, [pc, #40]	; (8000fc4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000f9c:	4c0a      	ldr	r4, [pc, #40]	; (8000fc8 <LoopForever+0x16>)
  movs r3, #0
 8000f9e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fa0:	e001      	b.n	8000fa6 <LoopFillZerobss>

08000fa2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fa2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fa4:	3204      	adds	r2, #4

08000fa6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fa6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fa8:	d3fb      	bcc.n	8000fa2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000faa:	f000 f817 	bl	8000fdc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000fae:	f7ff ff9b 	bl	8000ee8 <main>

08000fb2 <LoopForever>:

LoopForever:
    b LoopForever
 8000fb2:	e7fe      	b.n	8000fb2 <LoopForever>
  ldr   r0, =_estack
 8000fb4:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000fb8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fbc:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8000fc0:	0800196c 	.word	0x0800196c
  ldr r2, =_sbss
 8000fc4:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 8000fc8:	200000ac 	.word	0x200000ac

08000fcc <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000fcc:	e7fe      	b.n	8000fcc <ADC_IRQHandler>
	...

08000fd0 <__errno>:
 8000fd0:	4b01      	ldr	r3, [pc, #4]	; (8000fd8 <__errno+0x8>)
 8000fd2:	6818      	ldr	r0, [r3, #0]
 8000fd4:	4770      	bx	lr
 8000fd6:	46c0      	nop			; (mov r8, r8)
 8000fd8:	20000000 	.word	0x20000000

08000fdc <__libc_init_array>:
 8000fdc:	b570      	push	{r4, r5, r6, lr}
 8000fde:	2600      	movs	r6, #0
 8000fe0:	4d0c      	ldr	r5, [pc, #48]	; (8001014 <__libc_init_array+0x38>)
 8000fe2:	4c0d      	ldr	r4, [pc, #52]	; (8001018 <__libc_init_array+0x3c>)
 8000fe4:	1b64      	subs	r4, r4, r5
 8000fe6:	10a4      	asrs	r4, r4, #2
 8000fe8:	42a6      	cmp	r6, r4
 8000fea:	d109      	bne.n	8001000 <__libc_init_array+0x24>
 8000fec:	2600      	movs	r6, #0
 8000fee:	f000 fc83 	bl	80018f8 <_init>
 8000ff2:	4d0a      	ldr	r5, [pc, #40]	; (800101c <__libc_init_array+0x40>)
 8000ff4:	4c0a      	ldr	r4, [pc, #40]	; (8001020 <__libc_init_array+0x44>)
 8000ff6:	1b64      	subs	r4, r4, r5
 8000ff8:	10a4      	asrs	r4, r4, #2
 8000ffa:	42a6      	cmp	r6, r4
 8000ffc:	d105      	bne.n	800100a <__libc_init_array+0x2e>
 8000ffe:	bd70      	pop	{r4, r5, r6, pc}
 8001000:	00b3      	lsls	r3, r6, #2
 8001002:	58eb      	ldr	r3, [r5, r3]
 8001004:	4798      	blx	r3
 8001006:	3601      	adds	r6, #1
 8001008:	e7ee      	b.n	8000fe8 <__libc_init_array+0xc>
 800100a:	00b3      	lsls	r3, r6, #2
 800100c:	58eb      	ldr	r3, [r5, r3]
 800100e:	4798      	blx	r3
 8001010:	3601      	adds	r6, #1
 8001012:	e7f2      	b.n	8000ffa <__libc_init_array+0x1e>
 8001014:	08001964 	.word	0x08001964
 8001018:	08001964 	.word	0x08001964
 800101c:	08001964 	.word	0x08001964
 8001020:	08001968 	.word	0x08001968

08001024 <siprintf>:
 8001024:	b40e      	push	{r1, r2, r3}
 8001026:	b500      	push	{lr}
 8001028:	490b      	ldr	r1, [pc, #44]	; (8001058 <siprintf+0x34>)
 800102a:	b09c      	sub	sp, #112	; 0x70
 800102c:	ab1d      	add	r3, sp, #116	; 0x74
 800102e:	9002      	str	r0, [sp, #8]
 8001030:	9006      	str	r0, [sp, #24]
 8001032:	9107      	str	r1, [sp, #28]
 8001034:	9104      	str	r1, [sp, #16]
 8001036:	4809      	ldr	r0, [pc, #36]	; (800105c <siprintf+0x38>)
 8001038:	4909      	ldr	r1, [pc, #36]	; (8001060 <siprintf+0x3c>)
 800103a:	cb04      	ldmia	r3!, {r2}
 800103c:	9105      	str	r1, [sp, #20]
 800103e:	6800      	ldr	r0, [r0, #0]
 8001040:	a902      	add	r1, sp, #8
 8001042:	9301      	str	r3, [sp, #4]
 8001044:	f000 f870 	bl	8001128 <_svfiprintf_r>
 8001048:	2300      	movs	r3, #0
 800104a:	9a02      	ldr	r2, [sp, #8]
 800104c:	7013      	strb	r3, [r2, #0]
 800104e:	b01c      	add	sp, #112	; 0x70
 8001050:	bc08      	pop	{r3}
 8001052:	b003      	add	sp, #12
 8001054:	4718      	bx	r3
 8001056:	46c0      	nop			; (mov r8, r8)
 8001058:	7fffffff 	.word	0x7fffffff
 800105c:	20000000 	.word	0x20000000
 8001060:	ffff0208 	.word	0xffff0208

08001064 <__ssputs_r>:
 8001064:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001066:	688e      	ldr	r6, [r1, #8]
 8001068:	b085      	sub	sp, #20
 800106a:	0007      	movs	r7, r0
 800106c:	000c      	movs	r4, r1
 800106e:	9203      	str	r2, [sp, #12]
 8001070:	9301      	str	r3, [sp, #4]
 8001072:	429e      	cmp	r6, r3
 8001074:	d83c      	bhi.n	80010f0 <__ssputs_r+0x8c>
 8001076:	2390      	movs	r3, #144	; 0x90
 8001078:	898a      	ldrh	r2, [r1, #12]
 800107a:	00db      	lsls	r3, r3, #3
 800107c:	421a      	tst	r2, r3
 800107e:	d034      	beq.n	80010ea <__ssputs_r+0x86>
 8001080:	6909      	ldr	r1, [r1, #16]
 8001082:	6823      	ldr	r3, [r4, #0]
 8001084:	6960      	ldr	r0, [r4, #20]
 8001086:	1a5b      	subs	r3, r3, r1
 8001088:	9302      	str	r3, [sp, #8]
 800108a:	2303      	movs	r3, #3
 800108c:	4343      	muls	r3, r0
 800108e:	0fdd      	lsrs	r5, r3, #31
 8001090:	18ed      	adds	r5, r5, r3
 8001092:	9b01      	ldr	r3, [sp, #4]
 8001094:	9802      	ldr	r0, [sp, #8]
 8001096:	3301      	adds	r3, #1
 8001098:	181b      	adds	r3, r3, r0
 800109a:	106d      	asrs	r5, r5, #1
 800109c:	42ab      	cmp	r3, r5
 800109e:	d900      	bls.n	80010a2 <__ssputs_r+0x3e>
 80010a0:	001d      	movs	r5, r3
 80010a2:	0553      	lsls	r3, r2, #21
 80010a4:	d532      	bpl.n	800110c <__ssputs_r+0xa8>
 80010a6:	0029      	movs	r1, r5
 80010a8:	0038      	movs	r0, r7
 80010aa:	f000 fb53 	bl	8001754 <_malloc_r>
 80010ae:	1e06      	subs	r6, r0, #0
 80010b0:	d109      	bne.n	80010c6 <__ssputs_r+0x62>
 80010b2:	230c      	movs	r3, #12
 80010b4:	603b      	str	r3, [r7, #0]
 80010b6:	2340      	movs	r3, #64	; 0x40
 80010b8:	2001      	movs	r0, #1
 80010ba:	89a2      	ldrh	r2, [r4, #12]
 80010bc:	4240      	negs	r0, r0
 80010be:	4313      	orrs	r3, r2
 80010c0:	81a3      	strh	r3, [r4, #12]
 80010c2:	b005      	add	sp, #20
 80010c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80010c6:	9a02      	ldr	r2, [sp, #8]
 80010c8:	6921      	ldr	r1, [r4, #16]
 80010ca:	f000 faba 	bl	8001642 <memcpy>
 80010ce:	89a3      	ldrh	r3, [r4, #12]
 80010d0:	4a14      	ldr	r2, [pc, #80]	; (8001124 <__ssputs_r+0xc0>)
 80010d2:	401a      	ands	r2, r3
 80010d4:	2380      	movs	r3, #128	; 0x80
 80010d6:	4313      	orrs	r3, r2
 80010d8:	81a3      	strh	r3, [r4, #12]
 80010da:	9b02      	ldr	r3, [sp, #8]
 80010dc:	6126      	str	r6, [r4, #16]
 80010de:	18f6      	adds	r6, r6, r3
 80010e0:	6026      	str	r6, [r4, #0]
 80010e2:	6165      	str	r5, [r4, #20]
 80010e4:	9e01      	ldr	r6, [sp, #4]
 80010e6:	1aed      	subs	r5, r5, r3
 80010e8:	60a5      	str	r5, [r4, #8]
 80010ea:	9b01      	ldr	r3, [sp, #4]
 80010ec:	429e      	cmp	r6, r3
 80010ee:	d900      	bls.n	80010f2 <__ssputs_r+0x8e>
 80010f0:	9e01      	ldr	r6, [sp, #4]
 80010f2:	0032      	movs	r2, r6
 80010f4:	9903      	ldr	r1, [sp, #12]
 80010f6:	6820      	ldr	r0, [r4, #0]
 80010f8:	f000 faac 	bl	8001654 <memmove>
 80010fc:	68a3      	ldr	r3, [r4, #8]
 80010fe:	2000      	movs	r0, #0
 8001100:	1b9b      	subs	r3, r3, r6
 8001102:	60a3      	str	r3, [r4, #8]
 8001104:	6823      	ldr	r3, [r4, #0]
 8001106:	199e      	adds	r6, r3, r6
 8001108:	6026      	str	r6, [r4, #0]
 800110a:	e7da      	b.n	80010c2 <__ssputs_r+0x5e>
 800110c:	002a      	movs	r2, r5
 800110e:	0038      	movs	r0, r7
 8001110:	f000 fb96 	bl	8001840 <_realloc_r>
 8001114:	1e06      	subs	r6, r0, #0
 8001116:	d1e0      	bne.n	80010da <__ssputs_r+0x76>
 8001118:	0038      	movs	r0, r7
 800111a:	6921      	ldr	r1, [r4, #16]
 800111c:	f000 faae 	bl	800167c <_free_r>
 8001120:	e7c7      	b.n	80010b2 <__ssputs_r+0x4e>
 8001122:	46c0      	nop			; (mov r8, r8)
 8001124:	fffffb7f 	.word	0xfffffb7f

08001128 <_svfiprintf_r>:
 8001128:	b5f0      	push	{r4, r5, r6, r7, lr}
 800112a:	b0a1      	sub	sp, #132	; 0x84
 800112c:	9003      	str	r0, [sp, #12]
 800112e:	001d      	movs	r5, r3
 8001130:	898b      	ldrh	r3, [r1, #12]
 8001132:	000f      	movs	r7, r1
 8001134:	0016      	movs	r6, r2
 8001136:	061b      	lsls	r3, r3, #24
 8001138:	d511      	bpl.n	800115e <_svfiprintf_r+0x36>
 800113a:	690b      	ldr	r3, [r1, #16]
 800113c:	2b00      	cmp	r3, #0
 800113e:	d10e      	bne.n	800115e <_svfiprintf_r+0x36>
 8001140:	2140      	movs	r1, #64	; 0x40
 8001142:	f000 fb07 	bl	8001754 <_malloc_r>
 8001146:	6038      	str	r0, [r7, #0]
 8001148:	6138      	str	r0, [r7, #16]
 800114a:	2800      	cmp	r0, #0
 800114c:	d105      	bne.n	800115a <_svfiprintf_r+0x32>
 800114e:	230c      	movs	r3, #12
 8001150:	9a03      	ldr	r2, [sp, #12]
 8001152:	3801      	subs	r0, #1
 8001154:	6013      	str	r3, [r2, #0]
 8001156:	b021      	add	sp, #132	; 0x84
 8001158:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800115a:	2340      	movs	r3, #64	; 0x40
 800115c:	617b      	str	r3, [r7, #20]
 800115e:	2300      	movs	r3, #0
 8001160:	ac08      	add	r4, sp, #32
 8001162:	6163      	str	r3, [r4, #20]
 8001164:	3320      	adds	r3, #32
 8001166:	7663      	strb	r3, [r4, #25]
 8001168:	3310      	adds	r3, #16
 800116a:	76a3      	strb	r3, [r4, #26]
 800116c:	9507      	str	r5, [sp, #28]
 800116e:	0035      	movs	r5, r6
 8001170:	782b      	ldrb	r3, [r5, #0]
 8001172:	2b00      	cmp	r3, #0
 8001174:	d001      	beq.n	800117a <_svfiprintf_r+0x52>
 8001176:	2b25      	cmp	r3, #37	; 0x25
 8001178:	d147      	bne.n	800120a <_svfiprintf_r+0xe2>
 800117a:	1bab      	subs	r3, r5, r6
 800117c:	9305      	str	r3, [sp, #20]
 800117e:	42b5      	cmp	r5, r6
 8001180:	d00c      	beq.n	800119c <_svfiprintf_r+0x74>
 8001182:	0032      	movs	r2, r6
 8001184:	0039      	movs	r1, r7
 8001186:	9803      	ldr	r0, [sp, #12]
 8001188:	f7ff ff6c 	bl	8001064 <__ssputs_r>
 800118c:	1c43      	adds	r3, r0, #1
 800118e:	d100      	bne.n	8001192 <_svfiprintf_r+0x6a>
 8001190:	e0ae      	b.n	80012f0 <_svfiprintf_r+0x1c8>
 8001192:	6962      	ldr	r2, [r4, #20]
 8001194:	9b05      	ldr	r3, [sp, #20]
 8001196:	4694      	mov	ip, r2
 8001198:	4463      	add	r3, ip
 800119a:	6163      	str	r3, [r4, #20]
 800119c:	782b      	ldrb	r3, [r5, #0]
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d100      	bne.n	80011a4 <_svfiprintf_r+0x7c>
 80011a2:	e0a5      	b.n	80012f0 <_svfiprintf_r+0x1c8>
 80011a4:	2201      	movs	r2, #1
 80011a6:	2300      	movs	r3, #0
 80011a8:	4252      	negs	r2, r2
 80011aa:	6062      	str	r2, [r4, #4]
 80011ac:	a904      	add	r1, sp, #16
 80011ae:	3254      	adds	r2, #84	; 0x54
 80011b0:	1852      	adds	r2, r2, r1
 80011b2:	1c6e      	adds	r6, r5, #1
 80011b4:	6023      	str	r3, [r4, #0]
 80011b6:	60e3      	str	r3, [r4, #12]
 80011b8:	60a3      	str	r3, [r4, #8]
 80011ba:	7013      	strb	r3, [r2, #0]
 80011bc:	65a3      	str	r3, [r4, #88]	; 0x58
 80011be:	2205      	movs	r2, #5
 80011c0:	7831      	ldrb	r1, [r6, #0]
 80011c2:	4854      	ldr	r0, [pc, #336]	; (8001314 <_svfiprintf_r+0x1ec>)
 80011c4:	f000 fa32 	bl	800162c <memchr>
 80011c8:	1c75      	adds	r5, r6, #1
 80011ca:	2800      	cmp	r0, #0
 80011cc:	d11f      	bne.n	800120e <_svfiprintf_r+0xe6>
 80011ce:	6822      	ldr	r2, [r4, #0]
 80011d0:	06d3      	lsls	r3, r2, #27
 80011d2:	d504      	bpl.n	80011de <_svfiprintf_r+0xb6>
 80011d4:	2353      	movs	r3, #83	; 0x53
 80011d6:	a904      	add	r1, sp, #16
 80011d8:	185b      	adds	r3, r3, r1
 80011da:	2120      	movs	r1, #32
 80011dc:	7019      	strb	r1, [r3, #0]
 80011de:	0713      	lsls	r3, r2, #28
 80011e0:	d504      	bpl.n	80011ec <_svfiprintf_r+0xc4>
 80011e2:	2353      	movs	r3, #83	; 0x53
 80011e4:	a904      	add	r1, sp, #16
 80011e6:	185b      	adds	r3, r3, r1
 80011e8:	212b      	movs	r1, #43	; 0x2b
 80011ea:	7019      	strb	r1, [r3, #0]
 80011ec:	7833      	ldrb	r3, [r6, #0]
 80011ee:	2b2a      	cmp	r3, #42	; 0x2a
 80011f0:	d016      	beq.n	8001220 <_svfiprintf_r+0xf8>
 80011f2:	0035      	movs	r5, r6
 80011f4:	2100      	movs	r1, #0
 80011f6:	200a      	movs	r0, #10
 80011f8:	68e3      	ldr	r3, [r4, #12]
 80011fa:	782a      	ldrb	r2, [r5, #0]
 80011fc:	1c6e      	adds	r6, r5, #1
 80011fe:	3a30      	subs	r2, #48	; 0x30
 8001200:	2a09      	cmp	r2, #9
 8001202:	d94e      	bls.n	80012a2 <_svfiprintf_r+0x17a>
 8001204:	2900      	cmp	r1, #0
 8001206:	d111      	bne.n	800122c <_svfiprintf_r+0x104>
 8001208:	e017      	b.n	800123a <_svfiprintf_r+0x112>
 800120a:	3501      	adds	r5, #1
 800120c:	e7b0      	b.n	8001170 <_svfiprintf_r+0x48>
 800120e:	4b41      	ldr	r3, [pc, #260]	; (8001314 <_svfiprintf_r+0x1ec>)
 8001210:	6822      	ldr	r2, [r4, #0]
 8001212:	1ac0      	subs	r0, r0, r3
 8001214:	2301      	movs	r3, #1
 8001216:	4083      	lsls	r3, r0
 8001218:	4313      	orrs	r3, r2
 800121a:	002e      	movs	r6, r5
 800121c:	6023      	str	r3, [r4, #0]
 800121e:	e7ce      	b.n	80011be <_svfiprintf_r+0x96>
 8001220:	9b07      	ldr	r3, [sp, #28]
 8001222:	1d19      	adds	r1, r3, #4
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	9107      	str	r1, [sp, #28]
 8001228:	2b00      	cmp	r3, #0
 800122a:	db01      	blt.n	8001230 <_svfiprintf_r+0x108>
 800122c:	930b      	str	r3, [sp, #44]	; 0x2c
 800122e:	e004      	b.n	800123a <_svfiprintf_r+0x112>
 8001230:	425b      	negs	r3, r3
 8001232:	60e3      	str	r3, [r4, #12]
 8001234:	2302      	movs	r3, #2
 8001236:	4313      	orrs	r3, r2
 8001238:	6023      	str	r3, [r4, #0]
 800123a:	782b      	ldrb	r3, [r5, #0]
 800123c:	2b2e      	cmp	r3, #46	; 0x2e
 800123e:	d10a      	bne.n	8001256 <_svfiprintf_r+0x12e>
 8001240:	786b      	ldrb	r3, [r5, #1]
 8001242:	2b2a      	cmp	r3, #42	; 0x2a
 8001244:	d135      	bne.n	80012b2 <_svfiprintf_r+0x18a>
 8001246:	9b07      	ldr	r3, [sp, #28]
 8001248:	3502      	adds	r5, #2
 800124a:	1d1a      	adds	r2, r3, #4
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	9207      	str	r2, [sp, #28]
 8001250:	2b00      	cmp	r3, #0
 8001252:	db2b      	blt.n	80012ac <_svfiprintf_r+0x184>
 8001254:	9309      	str	r3, [sp, #36]	; 0x24
 8001256:	4e30      	ldr	r6, [pc, #192]	; (8001318 <_svfiprintf_r+0x1f0>)
 8001258:	2203      	movs	r2, #3
 800125a:	0030      	movs	r0, r6
 800125c:	7829      	ldrb	r1, [r5, #0]
 800125e:	f000 f9e5 	bl	800162c <memchr>
 8001262:	2800      	cmp	r0, #0
 8001264:	d006      	beq.n	8001274 <_svfiprintf_r+0x14c>
 8001266:	2340      	movs	r3, #64	; 0x40
 8001268:	1b80      	subs	r0, r0, r6
 800126a:	4083      	lsls	r3, r0
 800126c:	6822      	ldr	r2, [r4, #0]
 800126e:	3501      	adds	r5, #1
 8001270:	4313      	orrs	r3, r2
 8001272:	6023      	str	r3, [r4, #0]
 8001274:	7829      	ldrb	r1, [r5, #0]
 8001276:	2206      	movs	r2, #6
 8001278:	4828      	ldr	r0, [pc, #160]	; (800131c <_svfiprintf_r+0x1f4>)
 800127a:	1c6e      	adds	r6, r5, #1
 800127c:	7621      	strb	r1, [r4, #24]
 800127e:	f000 f9d5 	bl	800162c <memchr>
 8001282:	2800      	cmp	r0, #0
 8001284:	d03c      	beq.n	8001300 <_svfiprintf_r+0x1d8>
 8001286:	4b26      	ldr	r3, [pc, #152]	; (8001320 <_svfiprintf_r+0x1f8>)
 8001288:	2b00      	cmp	r3, #0
 800128a:	d125      	bne.n	80012d8 <_svfiprintf_r+0x1b0>
 800128c:	2207      	movs	r2, #7
 800128e:	9b07      	ldr	r3, [sp, #28]
 8001290:	3307      	adds	r3, #7
 8001292:	4393      	bics	r3, r2
 8001294:	3308      	adds	r3, #8
 8001296:	9307      	str	r3, [sp, #28]
 8001298:	6963      	ldr	r3, [r4, #20]
 800129a:	9a04      	ldr	r2, [sp, #16]
 800129c:	189b      	adds	r3, r3, r2
 800129e:	6163      	str	r3, [r4, #20]
 80012a0:	e765      	b.n	800116e <_svfiprintf_r+0x46>
 80012a2:	4343      	muls	r3, r0
 80012a4:	0035      	movs	r5, r6
 80012a6:	2101      	movs	r1, #1
 80012a8:	189b      	adds	r3, r3, r2
 80012aa:	e7a6      	b.n	80011fa <_svfiprintf_r+0xd2>
 80012ac:	2301      	movs	r3, #1
 80012ae:	425b      	negs	r3, r3
 80012b0:	e7d0      	b.n	8001254 <_svfiprintf_r+0x12c>
 80012b2:	2300      	movs	r3, #0
 80012b4:	200a      	movs	r0, #10
 80012b6:	001a      	movs	r2, r3
 80012b8:	3501      	adds	r5, #1
 80012ba:	6063      	str	r3, [r4, #4]
 80012bc:	7829      	ldrb	r1, [r5, #0]
 80012be:	1c6e      	adds	r6, r5, #1
 80012c0:	3930      	subs	r1, #48	; 0x30
 80012c2:	2909      	cmp	r1, #9
 80012c4:	d903      	bls.n	80012ce <_svfiprintf_r+0x1a6>
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d0c5      	beq.n	8001256 <_svfiprintf_r+0x12e>
 80012ca:	9209      	str	r2, [sp, #36]	; 0x24
 80012cc:	e7c3      	b.n	8001256 <_svfiprintf_r+0x12e>
 80012ce:	4342      	muls	r2, r0
 80012d0:	0035      	movs	r5, r6
 80012d2:	2301      	movs	r3, #1
 80012d4:	1852      	adds	r2, r2, r1
 80012d6:	e7f1      	b.n	80012bc <_svfiprintf_r+0x194>
 80012d8:	ab07      	add	r3, sp, #28
 80012da:	9300      	str	r3, [sp, #0]
 80012dc:	003a      	movs	r2, r7
 80012de:	0021      	movs	r1, r4
 80012e0:	4b10      	ldr	r3, [pc, #64]	; (8001324 <_svfiprintf_r+0x1fc>)
 80012e2:	9803      	ldr	r0, [sp, #12]
 80012e4:	e000      	b.n	80012e8 <_svfiprintf_r+0x1c0>
 80012e6:	bf00      	nop
 80012e8:	9004      	str	r0, [sp, #16]
 80012ea:	9b04      	ldr	r3, [sp, #16]
 80012ec:	3301      	adds	r3, #1
 80012ee:	d1d3      	bne.n	8001298 <_svfiprintf_r+0x170>
 80012f0:	89bb      	ldrh	r3, [r7, #12]
 80012f2:	980d      	ldr	r0, [sp, #52]	; 0x34
 80012f4:	065b      	lsls	r3, r3, #25
 80012f6:	d400      	bmi.n	80012fa <_svfiprintf_r+0x1d2>
 80012f8:	e72d      	b.n	8001156 <_svfiprintf_r+0x2e>
 80012fa:	2001      	movs	r0, #1
 80012fc:	4240      	negs	r0, r0
 80012fe:	e72a      	b.n	8001156 <_svfiprintf_r+0x2e>
 8001300:	ab07      	add	r3, sp, #28
 8001302:	9300      	str	r3, [sp, #0]
 8001304:	003a      	movs	r2, r7
 8001306:	0021      	movs	r1, r4
 8001308:	4b06      	ldr	r3, [pc, #24]	; (8001324 <_svfiprintf_r+0x1fc>)
 800130a:	9803      	ldr	r0, [sp, #12]
 800130c:	f000 f87c 	bl	8001408 <_printf_i>
 8001310:	e7ea      	b.n	80012e8 <_svfiprintf_r+0x1c0>
 8001312:	46c0      	nop			; (mov r8, r8)
 8001314:	0800192f 	.word	0x0800192f
 8001318:	08001935 	.word	0x08001935
 800131c:	08001939 	.word	0x08001939
 8001320:	00000000 	.word	0x00000000
 8001324:	08001065 	.word	0x08001065

08001328 <_printf_common>:
 8001328:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800132a:	0015      	movs	r5, r2
 800132c:	9301      	str	r3, [sp, #4]
 800132e:	688a      	ldr	r2, [r1, #8]
 8001330:	690b      	ldr	r3, [r1, #16]
 8001332:	000c      	movs	r4, r1
 8001334:	9000      	str	r0, [sp, #0]
 8001336:	4293      	cmp	r3, r2
 8001338:	da00      	bge.n	800133c <_printf_common+0x14>
 800133a:	0013      	movs	r3, r2
 800133c:	0022      	movs	r2, r4
 800133e:	602b      	str	r3, [r5, #0]
 8001340:	3243      	adds	r2, #67	; 0x43
 8001342:	7812      	ldrb	r2, [r2, #0]
 8001344:	2a00      	cmp	r2, #0
 8001346:	d001      	beq.n	800134c <_printf_common+0x24>
 8001348:	3301      	adds	r3, #1
 800134a:	602b      	str	r3, [r5, #0]
 800134c:	6823      	ldr	r3, [r4, #0]
 800134e:	069b      	lsls	r3, r3, #26
 8001350:	d502      	bpl.n	8001358 <_printf_common+0x30>
 8001352:	682b      	ldr	r3, [r5, #0]
 8001354:	3302      	adds	r3, #2
 8001356:	602b      	str	r3, [r5, #0]
 8001358:	6822      	ldr	r2, [r4, #0]
 800135a:	2306      	movs	r3, #6
 800135c:	0017      	movs	r7, r2
 800135e:	401f      	ands	r7, r3
 8001360:	421a      	tst	r2, r3
 8001362:	d027      	beq.n	80013b4 <_printf_common+0x8c>
 8001364:	0023      	movs	r3, r4
 8001366:	3343      	adds	r3, #67	; 0x43
 8001368:	781b      	ldrb	r3, [r3, #0]
 800136a:	1e5a      	subs	r2, r3, #1
 800136c:	4193      	sbcs	r3, r2
 800136e:	6822      	ldr	r2, [r4, #0]
 8001370:	0692      	lsls	r2, r2, #26
 8001372:	d430      	bmi.n	80013d6 <_printf_common+0xae>
 8001374:	0022      	movs	r2, r4
 8001376:	9901      	ldr	r1, [sp, #4]
 8001378:	9800      	ldr	r0, [sp, #0]
 800137a:	9e08      	ldr	r6, [sp, #32]
 800137c:	3243      	adds	r2, #67	; 0x43
 800137e:	47b0      	blx	r6
 8001380:	1c43      	adds	r3, r0, #1
 8001382:	d025      	beq.n	80013d0 <_printf_common+0xa8>
 8001384:	2306      	movs	r3, #6
 8001386:	6820      	ldr	r0, [r4, #0]
 8001388:	682a      	ldr	r2, [r5, #0]
 800138a:	68e1      	ldr	r1, [r4, #12]
 800138c:	2500      	movs	r5, #0
 800138e:	4003      	ands	r3, r0
 8001390:	2b04      	cmp	r3, #4
 8001392:	d103      	bne.n	800139c <_printf_common+0x74>
 8001394:	1a8d      	subs	r5, r1, r2
 8001396:	43eb      	mvns	r3, r5
 8001398:	17db      	asrs	r3, r3, #31
 800139a:	401d      	ands	r5, r3
 800139c:	68a3      	ldr	r3, [r4, #8]
 800139e:	6922      	ldr	r2, [r4, #16]
 80013a0:	4293      	cmp	r3, r2
 80013a2:	dd01      	ble.n	80013a8 <_printf_common+0x80>
 80013a4:	1a9b      	subs	r3, r3, r2
 80013a6:	18ed      	adds	r5, r5, r3
 80013a8:	2700      	movs	r7, #0
 80013aa:	42bd      	cmp	r5, r7
 80013ac:	d120      	bne.n	80013f0 <_printf_common+0xc8>
 80013ae:	2000      	movs	r0, #0
 80013b0:	e010      	b.n	80013d4 <_printf_common+0xac>
 80013b2:	3701      	adds	r7, #1
 80013b4:	68e3      	ldr	r3, [r4, #12]
 80013b6:	682a      	ldr	r2, [r5, #0]
 80013b8:	1a9b      	subs	r3, r3, r2
 80013ba:	42bb      	cmp	r3, r7
 80013bc:	ddd2      	ble.n	8001364 <_printf_common+0x3c>
 80013be:	0022      	movs	r2, r4
 80013c0:	2301      	movs	r3, #1
 80013c2:	9901      	ldr	r1, [sp, #4]
 80013c4:	9800      	ldr	r0, [sp, #0]
 80013c6:	9e08      	ldr	r6, [sp, #32]
 80013c8:	3219      	adds	r2, #25
 80013ca:	47b0      	blx	r6
 80013cc:	1c43      	adds	r3, r0, #1
 80013ce:	d1f0      	bne.n	80013b2 <_printf_common+0x8a>
 80013d0:	2001      	movs	r0, #1
 80013d2:	4240      	negs	r0, r0
 80013d4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80013d6:	2030      	movs	r0, #48	; 0x30
 80013d8:	18e1      	adds	r1, r4, r3
 80013da:	3143      	adds	r1, #67	; 0x43
 80013dc:	7008      	strb	r0, [r1, #0]
 80013de:	0021      	movs	r1, r4
 80013e0:	1c5a      	adds	r2, r3, #1
 80013e2:	3145      	adds	r1, #69	; 0x45
 80013e4:	7809      	ldrb	r1, [r1, #0]
 80013e6:	18a2      	adds	r2, r4, r2
 80013e8:	3243      	adds	r2, #67	; 0x43
 80013ea:	3302      	adds	r3, #2
 80013ec:	7011      	strb	r1, [r2, #0]
 80013ee:	e7c1      	b.n	8001374 <_printf_common+0x4c>
 80013f0:	0022      	movs	r2, r4
 80013f2:	2301      	movs	r3, #1
 80013f4:	9901      	ldr	r1, [sp, #4]
 80013f6:	9800      	ldr	r0, [sp, #0]
 80013f8:	9e08      	ldr	r6, [sp, #32]
 80013fa:	321a      	adds	r2, #26
 80013fc:	47b0      	blx	r6
 80013fe:	1c43      	adds	r3, r0, #1
 8001400:	d0e6      	beq.n	80013d0 <_printf_common+0xa8>
 8001402:	3701      	adds	r7, #1
 8001404:	e7d1      	b.n	80013aa <_printf_common+0x82>
	...

08001408 <_printf_i>:
 8001408:	b5f0      	push	{r4, r5, r6, r7, lr}
 800140a:	b08b      	sub	sp, #44	; 0x2c
 800140c:	9206      	str	r2, [sp, #24]
 800140e:	000a      	movs	r2, r1
 8001410:	3243      	adds	r2, #67	; 0x43
 8001412:	9307      	str	r3, [sp, #28]
 8001414:	9005      	str	r0, [sp, #20]
 8001416:	9204      	str	r2, [sp, #16]
 8001418:	7e0a      	ldrb	r2, [r1, #24]
 800141a:	000c      	movs	r4, r1
 800141c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800141e:	2a78      	cmp	r2, #120	; 0x78
 8001420:	d807      	bhi.n	8001432 <_printf_i+0x2a>
 8001422:	2a62      	cmp	r2, #98	; 0x62
 8001424:	d809      	bhi.n	800143a <_printf_i+0x32>
 8001426:	2a00      	cmp	r2, #0
 8001428:	d100      	bne.n	800142c <_printf_i+0x24>
 800142a:	e0c1      	b.n	80015b0 <_printf_i+0x1a8>
 800142c:	2a58      	cmp	r2, #88	; 0x58
 800142e:	d100      	bne.n	8001432 <_printf_i+0x2a>
 8001430:	e08c      	b.n	800154c <_printf_i+0x144>
 8001432:	0026      	movs	r6, r4
 8001434:	3642      	adds	r6, #66	; 0x42
 8001436:	7032      	strb	r2, [r6, #0]
 8001438:	e022      	b.n	8001480 <_printf_i+0x78>
 800143a:	0010      	movs	r0, r2
 800143c:	3863      	subs	r0, #99	; 0x63
 800143e:	2815      	cmp	r0, #21
 8001440:	d8f7      	bhi.n	8001432 <_printf_i+0x2a>
 8001442:	f7fe fe61 	bl	8000108 <__gnu_thumb1_case_shi>
 8001446:	0016      	.short	0x0016
 8001448:	fff6001f 	.word	0xfff6001f
 800144c:	fff6fff6 	.word	0xfff6fff6
 8001450:	001ffff6 	.word	0x001ffff6
 8001454:	fff6fff6 	.word	0xfff6fff6
 8001458:	fff6fff6 	.word	0xfff6fff6
 800145c:	003600a8 	.word	0x003600a8
 8001460:	fff6009a 	.word	0xfff6009a
 8001464:	00b9fff6 	.word	0x00b9fff6
 8001468:	0036fff6 	.word	0x0036fff6
 800146c:	fff6fff6 	.word	0xfff6fff6
 8001470:	009e      	.short	0x009e
 8001472:	0026      	movs	r6, r4
 8001474:	681a      	ldr	r2, [r3, #0]
 8001476:	3642      	adds	r6, #66	; 0x42
 8001478:	1d11      	adds	r1, r2, #4
 800147a:	6019      	str	r1, [r3, #0]
 800147c:	6813      	ldr	r3, [r2, #0]
 800147e:	7033      	strb	r3, [r6, #0]
 8001480:	2301      	movs	r3, #1
 8001482:	e0a7      	b.n	80015d4 <_printf_i+0x1cc>
 8001484:	6808      	ldr	r0, [r1, #0]
 8001486:	6819      	ldr	r1, [r3, #0]
 8001488:	1d0a      	adds	r2, r1, #4
 800148a:	0605      	lsls	r5, r0, #24
 800148c:	d50b      	bpl.n	80014a6 <_printf_i+0x9e>
 800148e:	680d      	ldr	r5, [r1, #0]
 8001490:	601a      	str	r2, [r3, #0]
 8001492:	2d00      	cmp	r5, #0
 8001494:	da03      	bge.n	800149e <_printf_i+0x96>
 8001496:	232d      	movs	r3, #45	; 0x2d
 8001498:	9a04      	ldr	r2, [sp, #16]
 800149a:	426d      	negs	r5, r5
 800149c:	7013      	strb	r3, [r2, #0]
 800149e:	4b61      	ldr	r3, [pc, #388]	; (8001624 <_printf_i+0x21c>)
 80014a0:	270a      	movs	r7, #10
 80014a2:	9303      	str	r3, [sp, #12]
 80014a4:	e01b      	b.n	80014de <_printf_i+0xd6>
 80014a6:	680d      	ldr	r5, [r1, #0]
 80014a8:	601a      	str	r2, [r3, #0]
 80014aa:	0641      	lsls	r1, r0, #25
 80014ac:	d5f1      	bpl.n	8001492 <_printf_i+0x8a>
 80014ae:	b22d      	sxth	r5, r5
 80014b0:	e7ef      	b.n	8001492 <_printf_i+0x8a>
 80014b2:	680d      	ldr	r5, [r1, #0]
 80014b4:	6819      	ldr	r1, [r3, #0]
 80014b6:	1d08      	adds	r0, r1, #4
 80014b8:	6018      	str	r0, [r3, #0]
 80014ba:	062e      	lsls	r6, r5, #24
 80014bc:	d501      	bpl.n	80014c2 <_printf_i+0xba>
 80014be:	680d      	ldr	r5, [r1, #0]
 80014c0:	e003      	b.n	80014ca <_printf_i+0xc2>
 80014c2:	066d      	lsls	r5, r5, #25
 80014c4:	d5fb      	bpl.n	80014be <_printf_i+0xb6>
 80014c6:	680d      	ldr	r5, [r1, #0]
 80014c8:	b2ad      	uxth	r5, r5
 80014ca:	4b56      	ldr	r3, [pc, #344]	; (8001624 <_printf_i+0x21c>)
 80014cc:	2708      	movs	r7, #8
 80014ce:	9303      	str	r3, [sp, #12]
 80014d0:	2a6f      	cmp	r2, #111	; 0x6f
 80014d2:	d000      	beq.n	80014d6 <_printf_i+0xce>
 80014d4:	3702      	adds	r7, #2
 80014d6:	0023      	movs	r3, r4
 80014d8:	2200      	movs	r2, #0
 80014da:	3343      	adds	r3, #67	; 0x43
 80014dc:	701a      	strb	r2, [r3, #0]
 80014de:	6863      	ldr	r3, [r4, #4]
 80014e0:	60a3      	str	r3, [r4, #8]
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	db03      	blt.n	80014ee <_printf_i+0xe6>
 80014e6:	2204      	movs	r2, #4
 80014e8:	6821      	ldr	r1, [r4, #0]
 80014ea:	4391      	bics	r1, r2
 80014ec:	6021      	str	r1, [r4, #0]
 80014ee:	2d00      	cmp	r5, #0
 80014f0:	d102      	bne.n	80014f8 <_printf_i+0xf0>
 80014f2:	9e04      	ldr	r6, [sp, #16]
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d00c      	beq.n	8001512 <_printf_i+0x10a>
 80014f8:	9e04      	ldr	r6, [sp, #16]
 80014fa:	0028      	movs	r0, r5
 80014fc:	0039      	movs	r1, r7
 80014fe:	f7fe fe93 	bl	8000228 <__aeabi_uidivmod>
 8001502:	9b03      	ldr	r3, [sp, #12]
 8001504:	3e01      	subs	r6, #1
 8001506:	5c5b      	ldrb	r3, [r3, r1]
 8001508:	7033      	strb	r3, [r6, #0]
 800150a:	002b      	movs	r3, r5
 800150c:	0005      	movs	r5, r0
 800150e:	429f      	cmp	r7, r3
 8001510:	d9f3      	bls.n	80014fa <_printf_i+0xf2>
 8001512:	2f08      	cmp	r7, #8
 8001514:	d109      	bne.n	800152a <_printf_i+0x122>
 8001516:	6823      	ldr	r3, [r4, #0]
 8001518:	07db      	lsls	r3, r3, #31
 800151a:	d506      	bpl.n	800152a <_printf_i+0x122>
 800151c:	6863      	ldr	r3, [r4, #4]
 800151e:	6922      	ldr	r2, [r4, #16]
 8001520:	4293      	cmp	r3, r2
 8001522:	dc02      	bgt.n	800152a <_printf_i+0x122>
 8001524:	2330      	movs	r3, #48	; 0x30
 8001526:	3e01      	subs	r6, #1
 8001528:	7033      	strb	r3, [r6, #0]
 800152a:	9b04      	ldr	r3, [sp, #16]
 800152c:	1b9b      	subs	r3, r3, r6
 800152e:	6123      	str	r3, [r4, #16]
 8001530:	9b07      	ldr	r3, [sp, #28]
 8001532:	0021      	movs	r1, r4
 8001534:	9300      	str	r3, [sp, #0]
 8001536:	9805      	ldr	r0, [sp, #20]
 8001538:	9b06      	ldr	r3, [sp, #24]
 800153a:	aa09      	add	r2, sp, #36	; 0x24
 800153c:	f7ff fef4 	bl	8001328 <_printf_common>
 8001540:	1c43      	adds	r3, r0, #1
 8001542:	d14c      	bne.n	80015de <_printf_i+0x1d6>
 8001544:	2001      	movs	r0, #1
 8001546:	4240      	negs	r0, r0
 8001548:	b00b      	add	sp, #44	; 0x2c
 800154a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800154c:	3145      	adds	r1, #69	; 0x45
 800154e:	700a      	strb	r2, [r1, #0]
 8001550:	4a34      	ldr	r2, [pc, #208]	; (8001624 <_printf_i+0x21c>)
 8001552:	9203      	str	r2, [sp, #12]
 8001554:	681a      	ldr	r2, [r3, #0]
 8001556:	6821      	ldr	r1, [r4, #0]
 8001558:	ca20      	ldmia	r2!, {r5}
 800155a:	601a      	str	r2, [r3, #0]
 800155c:	0608      	lsls	r0, r1, #24
 800155e:	d516      	bpl.n	800158e <_printf_i+0x186>
 8001560:	07cb      	lsls	r3, r1, #31
 8001562:	d502      	bpl.n	800156a <_printf_i+0x162>
 8001564:	2320      	movs	r3, #32
 8001566:	4319      	orrs	r1, r3
 8001568:	6021      	str	r1, [r4, #0]
 800156a:	2710      	movs	r7, #16
 800156c:	2d00      	cmp	r5, #0
 800156e:	d1b2      	bne.n	80014d6 <_printf_i+0xce>
 8001570:	2320      	movs	r3, #32
 8001572:	6822      	ldr	r2, [r4, #0]
 8001574:	439a      	bics	r2, r3
 8001576:	6022      	str	r2, [r4, #0]
 8001578:	e7ad      	b.n	80014d6 <_printf_i+0xce>
 800157a:	2220      	movs	r2, #32
 800157c:	6809      	ldr	r1, [r1, #0]
 800157e:	430a      	orrs	r2, r1
 8001580:	6022      	str	r2, [r4, #0]
 8001582:	0022      	movs	r2, r4
 8001584:	2178      	movs	r1, #120	; 0x78
 8001586:	3245      	adds	r2, #69	; 0x45
 8001588:	7011      	strb	r1, [r2, #0]
 800158a:	4a27      	ldr	r2, [pc, #156]	; (8001628 <_printf_i+0x220>)
 800158c:	e7e1      	b.n	8001552 <_printf_i+0x14a>
 800158e:	0648      	lsls	r0, r1, #25
 8001590:	d5e6      	bpl.n	8001560 <_printf_i+0x158>
 8001592:	b2ad      	uxth	r5, r5
 8001594:	e7e4      	b.n	8001560 <_printf_i+0x158>
 8001596:	681a      	ldr	r2, [r3, #0]
 8001598:	680d      	ldr	r5, [r1, #0]
 800159a:	1d10      	adds	r0, r2, #4
 800159c:	6949      	ldr	r1, [r1, #20]
 800159e:	6018      	str	r0, [r3, #0]
 80015a0:	6813      	ldr	r3, [r2, #0]
 80015a2:	062e      	lsls	r6, r5, #24
 80015a4:	d501      	bpl.n	80015aa <_printf_i+0x1a2>
 80015a6:	6019      	str	r1, [r3, #0]
 80015a8:	e002      	b.n	80015b0 <_printf_i+0x1a8>
 80015aa:	066d      	lsls	r5, r5, #25
 80015ac:	d5fb      	bpl.n	80015a6 <_printf_i+0x19e>
 80015ae:	8019      	strh	r1, [r3, #0]
 80015b0:	2300      	movs	r3, #0
 80015b2:	9e04      	ldr	r6, [sp, #16]
 80015b4:	6123      	str	r3, [r4, #16]
 80015b6:	e7bb      	b.n	8001530 <_printf_i+0x128>
 80015b8:	681a      	ldr	r2, [r3, #0]
 80015ba:	1d11      	adds	r1, r2, #4
 80015bc:	6019      	str	r1, [r3, #0]
 80015be:	6816      	ldr	r6, [r2, #0]
 80015c0:	2100      	movs	r1, #0
 80015c2:	0030      	movs	r0, r6
 80015c4:	6862      	ldr	r2, [r4, #4]
 80015c6:	f000 f831 	bl	800162c <memchr>
 80015ca:	2800      	cmp	r0, #0
 80015cc:	d001      	beq.n	80015d2 <_printf_i+0x1ca>
 80015ce:	1b80      	subs	r0, r0, r6
 80015d0:	6060      	str	r0, [r4, #4]
 80015d2:	6863      	ldr	r3, [r4, #4]
 80015d4:	6123      	str	r3, [r4, #16]
 80015d6:	2300      	movs	r3, #0
 80015d8:	9a04      	ldr	r2, [sp, #16]
 80015da:	7013      	strb	r3, [r2, #0]
 80015dc:	e7a8      	b.n	8001530 <_printf_i+0x128>
 80015de:	6923      	ldr	r3, [r4, #16]
 80015e0:	0032      	movs	r2, r6
 80015e2:	9906      	ldr	r1, [sp, #24]
 80015e4:	9805      	ldr	r0, [sp, #20]
 80015e6:	9d07      	ldr	r5, [sp, #28]
 80015e8:	47a8      	blx	r5
 80015ea:	1c43      	adds	r3, r0, #1
 80015ec:	d0aa      	beq.n	8001544 <_printf_i+0x13c>
 80015ee:	6823      	ldr	r3, [r4, #0]
 80015f0:	079b      	lsls	r3, r3, #30
 80015f2:	d415      	bmi.n	8001620 <_printf_i+0x218>
 80015f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80015f6:	68e0      	ldr	r0, [r4, #12]
 80015f8:	4298      	cmp	r0, r3
 80015fa:	daa5      	bge.n	8001548 <_printf_i+0x140>
 80015fc:	0018      	movs	r0, r3
 80015fe:	e7a3      	b.n	8001548 <_printf_i+0x140>
 8001600:	0022      	movs	r2, r4
 8001602:	2301      	movs	r3, #1
 8001604:	9906      	ldr	r1, [sp, #24]
 8001606:	9805      	ldr	r0, [sp, #20]
 8001608:	9e07      	ldr	r6, [sp, #28]
 800160a:	3219      	adds	r2, #25
 800160c:	47b0      	blx	r6
 800160e:	1c43      	adds	r3, r0, #1
 8001610:	d098      	beq.n	8001544 <_printf_i+0x13c>
 8001612:	3501      	adds	r5, #1
 8001614:	68e3      	ldr	r3, [r4, #12]
 8001616:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8001618:	1a9b      	subs	r3, r3, r2
 800161a:	42ab      	cmp	r3, r5
 800161c:	dcf0      	bgt.n	8001600 <_printf_i+0x1f8>
 800161e:	e7e9      	b.n	80015f4 <_printf_i+0x1ec>
 8001620:	2500      	movs	r5, #0
 8001622:	e7f7      	b.n	8001614 <_printf_i+0x20c>
 8001624:	08001940 	.word	0x08001940
 8001628:	08001951 	.word	0x08001951

0800162c <memchr>:
 800162c:	b2c9      	uxtb	r1, r1
 800162e:	1882      	adds	r2, r0, r2
 8001630:	4290      	cmp	r0, r2
 8001632:	d101      	bne.n	8001638 <memchr+0xc>
 8001634:	2000      	movs	r0, #0
 8001636:	4770      	bx	lr
 8001638:	7803      	ldrb	r3, [r0, #0]
 800163a:	428b      	cmp	r3, r1
 800163c:	d0fb      	beq.n	8001636 <memchr+0xa>
 800163e:	3001      	adds	r0, #1
 8001640:	e7f6      	b.n	8001630 <memchr+0x4>

08001642 <memcpy>:
 8001642:	2300      	movs	r3, #0
 8001644:	b510      	push	{r4, lr}
 8001646:	429a      	cmp	r2, r3
 8001648:	d100      	bne.n	800164c <memcpy+0xa>
 800164a:	bd10      	pop	{r4, pc}
 800164c:	5ccc      	ldrb	r4, [r1, r3]
 800164e:	54c4      	strb	r4, [r0, r3]
 8001650:	3301      	adds	r3, #1
 8001652:	e7f8      	b.n	8001646 <memcpy+0x4>

08001654 <memmove>:
 8001654:	b510      	push	{r4, lr}
 8001656:	4288      	cmp	r0, r1
 8001658:	d902      	bls.n	8001660 <memmove+0xc>
 800165a:	188b      	adds	r3, r1, r2
 800165c:	4298      	cmp	r0, r3
 800165e:	d303      	bcc.n	8001668 <memmove+0x14>
 8001660:	2300      	movs	r3, #0
 8001662:	e007      	b.n	8001674 <memmove+0x20>
 8001664:	5c8b      	ldrb	r3, [r1, r2]
 8001666:	5483      	strb	r3, [r0, r2]
 8001668:	3a01      	subs	r2, #1
 800166a:	d2fb      	bcs.n	8001664 <memmove+0x10>
 800166c:	bd10      	pop	{r4, pc}
 800166e:	5ccc      	ldrb	r4, [r1, r3]
 8001670:	54c4      	strb	r4, [r0, r3]
 8001672:	3301      	adds	r3, #1
 8001674:	429a      	cmp	r2, r3
 8001676:	d1fa      	bne.n	800166e <memmove+0x1a>
 8001678:	e7f8      	b.n	800166c <memmove+0x18>
	...

0800167c <_free_r>:
 800167c:	b570      	push	{r4, r5, r6, lr}
 800167e:	0005      	movs	r5, r0
 8001680:	2900      	cmp	r1, #0
 8001682:	d010      	beq.n	80016a6 <_free_r+0x2a>
 8001684:	1f0c      	subs	r4, r1, #4
 8001686:	6823      	ldr	r3, [r4, #0]
 8001688:	2b00      	cmp	r3, #0
 800168a:	da00      	bge.n	800168e <_free_r+0x12>
 800168c:	18e4      	adds	r4, r4, r3
 800168e:	0028      	movs	r0, r5
 8001690:	f000 f918 	bl	80018c4 <__malloc_lock>
 8001694:	4a1d      	ldr	r2, [pc, #116]	; (800170c <_free_r+0x90>)
 8001696:	6813      	ldr	r3, [r2, #0]
 8001698:	2b00      	cmp	r3, #0
 800169a:	d105      	bne.n	80016a8 <_free_r+0x2c>
 800169c:	6063      	str	r3, [r4, #4]
 800169e:	6014      	str	r4, [r2, #0]
 80016a0:	0028      	movs	r0, r5
 80016a2:	f000 f917 	bl	80018d4 <__malloc_unlock>
 80016a6:	bd70      	pop	{r4, r5, r6, pc}
 80016a8:	42a3      	cmp	r3, r4
 80016aa:	d908      	bls.n	80016be <_free_r+0x42>
 80016ac:	6821      	ldr	r1, [r4, #0]
 80016ae:	1860      	adds	r0, r4, r1
 80016b0:	4283      	cmp	r3, r0
 80016b2:	d1f3      	bne.n	800169c <_free_r+0x20>
 80016b4:	6818      	ldr	r0, [r3, #0]
 80016b6:	685b      	ldr	r3, [r3, #4]
 80016b8:	1841      	adds	r1, r0, r1
 80016ba:	6021      	str	r1, [r4, #0]
 80016bc:	e7ee      	b.n	800169c <_free_r+0x20>
 80016be:	001a      	movs	r2, r3
 80016c0:	685b      	ldr	r3, [r3, #4]
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d001      	beq.n	80016ca <_free_r+0x4e>
 80016c6:	42a3      	cmp	r3, r4
 80016c8:	d9f9      	bls.n	80016be <_free_r+0x42>
 80016ca:	6811      	ldr	r1, [r2, #0]
 80016cc:	1850      	adds	r0, r2, r1
 80016ce:	42a0      	cmp	r0, r4
 80016d0:	d10b      	bne.n	80016ea <_free_r+0x6e>
 80016d2:	6820      	ldr	r0, [r4, #0]
 80016d4:	1809      	adds	r1, r1, r0
 80016d6:	1850      	adds	r0, r2, r1
 80016d8:	6011      	str	r1, [r2, #0]
 80016da:	4283      	cmp	r3, r0
 80016dc:	d1e0      	bne.n	80016a0 <_free_r+0x24>
 80016de:	6818      	ldr	r0, [r3, #0]
 80016e0:	685b      	ldr	r3, [r3, #4]
 80016e2:	1841      	adds	r1, r0, r1
 80016e4:	6011      	str	r1, [r2, #0]
 80016e6:	6053      	str	r3, [r2, #4]
 80016e8:	e7da      	b.n	80016a0 <_free_r+0x24>
 80016ea:	42a0      	cmp	r0, r4
 80016ec:	d902      	bls.n	80016f4 <_free_r+0x78>
 80016ee:	230c      	movs	r3, #12
 80016f0:	602b      	str	r3, [r5, #0]
 80016f2:	e7d5      	b.n	80016a0 <_free_r+0x24>
 80016f4:	6821      	ldr	r1, [r4, #0]
 80016f6:	1860      	adds	r0, r4, r1
 80016f8:	4283      	cmp	r3, r0
 80016fa:	d103      	bne.n	8001704 <_free_r+0x88>
 80016fc:	6818      	ldr	r0, [r3, #0]
 80016fe:	685b      	ldr	r3, [r3, #4]
 8001700:	1841      	adds	r1, r0, r1
 8001702:	6021      	str	r1, [r4, #0]
 8001704:	6063      	str	r3, [r4, #4]
 8001706:	6054      	str	r4, [r2, #4]
 8001708:	e7ca      	b.n	80016a0 <_free_r+0x24>
 800170a:	46c0      	nop			; (mov r8, r8)
 800170c:	2000009c 	.word	0x2000009c

08001710 <sbrk_aligned>:
 8001710:	b570      	push	{r4, r5, r6, lr}
 8001712:	4e0f      	ldr	r6, [pc, #60]	; (8001750 <sbrk_aligned+0x40>)
 8001714:	000d      	movs	r5, r1
 8001716:	6831      	ldr	r1, [r6, #0]
 8001718:	0004      	movs	r4, r0
 800171a:	2900      	cmp	r1, #0
 800171c:	d102      	bne.n	8001724 <sbrk_aligned+0x14>
 800171e:	f000 f8bf 	bl	80018a0 <_sbrk_r>
 8001722:	6030      	str	r0, [r6, #0]
 8001724:	0029      	movs	r1, r5
 8001726:	0020      	movs	r0, r4
 8001728:	f000 f8ba 	bl	80018a0 <_sbrk_r>
 800172c:	1c43      	adds	r3, r0, #1
 800172e:	d00a      	beq.n	8001746 <sbrk_aligned+0x36>
 8001730:	2303      	movs	r3, #3
 8001732:	1cc5      	adds	r5, r0, #3
 8001734:	439d      	bics	r5, r3
 8001736:	42a8      	cmp	r0, r5
 8001738:	d007      	beq.n	800174a <sbrk_aligned+0x3a>
 800173a:	1a29      	subs	r1, r5, r0
 800173c:	0020      	movs	r0, r4
 800173e:	f000 f8af 	bl	80018a0 <_sbrk_r>
 8001742:	1c43      	adds	r3, r0, #1
 8001744:	d101      	bne.n	800174a <sbrk_aligned+0x3a>
 8001746:	2501      	movs	r5, #1
 8001748:	426d      	negs	r5, r5
 800174a:	0028      	movs	r0, r5
 800174c:	bd70      	pop	{r4, r5, r6, pc}
 800174e:	46c0      	nop			; (mov r8, r8)
 8001750:	200000a0 	.word	0x200000a0

08001754 <_malloc_r>:
 8001754:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001756:	2203      	movs	r2, #3
 8001758:	1ccb      	adds	r3, r1, #3
 800175a:	4393      	bics	r3, r2
 800175c:	3308      	adds	r3, #8
 800175e:	0006      	movs	r6, r0
 8001760:	001f      	movs	r7, r3
 8001762:	2b0c      	cmp	r3, #12
 8001764:	d232      	bcs.n	80017cc <_malloc_r+0x78>
 8001766:	270c      	movs	r7, #12
 8001768:	42b9      	cmp	r1, r7
 800176a:	d831      	bhi.n	80017d0 <_malloc_r+0x7c>
 800176c:	0030      	movs	r0, r6
 800176e:	f000 f8a9 	bl	80018c4 <__malloc_lock>
 8001772:	4d32      	ldr	r5, [pc, #200]	; (800183c <_malloc_r+0xe8>)
 8001774:	682b      	ldr	r3, [r5, #0]
 8001776:	001c      	movs	r4, r3
 8001778:	2c00      	cmp	r4, #0
 800177a:	d12e      	bne.n	80017da <_malloc_r+0x86>
 800177c:	0039      	movs	r1, r7
 800177e:	0030      	movs	r0, r6
 8001780:	f7ff ffc6 	bl	8001710 <sbrk_aligned>
 8001784:	0004      	movs	r4, r0
 8001786:	1c43      	adds	r3, r0, #1
 8001788:	d11e      	bne.n	80017c8 <_malloc_r+0x74>
 800178a:	682c      	ldr	r4, [r5, #0]
 800178c:	0025      	movs	r5, r4
 800178e:	2d00      	cmp	r5, #0
 8001790:	d14a      	bne.n	8001828 <_malloc_r+0xd4>
 8001792:	6823      	ldr	r3, [r4, #0]
 8001794:	0029      	movs	r1, r5
 8001796:	18e3      	adds	r3, r4, r3
 8001798:	0030      	movs	r0, r6
 800179a:	9301      	str	r3, [sp, #4]
 800179c:	f000 f880 	bl	80018a0 <_sbrk_r>
 80017a0:	9b01      	ldr	r3, [sp, #4]
 80017a2:	4283      	cmp	r3, r0
 80017a4:	d143      	bne.n	800182e <_malloc_r+0xda>
 80017a6:	6823      	ldr	r3, [r4, #0]
 80017a8:	3703      	adds	r7, #3
 80017aa:	1aff      	subs	r7, r7, r3
 80017ac:	2303      	movs	r3, #3
 80017ae:	439f      	bics	r7, r3
 80017b0:	3708      	adds	r7, #8
 80017b2:	2f0c      	cmp	r7, #12
 80017b4:	d200      	bcs.n	80017b8 <_malloc_r+0x64>
 80017b6:	270c      	movs	r7, #12
 80017b8:	0039      	movs	r1, r7
 80017ba:	0030      	movs	r0, r6
 80017bc:	f7ff ffa8 	bl	8001710 <sbrk_aligned>
 80017c0:	1c43      	adds	r3, r0, #1
 80017c2:	d034      	beq.n	800182e <_malloc_r+0xda>
 80017c4:	6823      	ldr	r3, [r4, #0]
 80017c6:	19df      	adds	r7, r3, r7
 80017c8:	6027      	str	r7, [r4, #0]
 80017ca:	e013      	b.n	80017f4 <_malloc_r+0xa0>
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	dacb      	bge.n	8001768 <_malloc_r+0x14>
 80017d0:	230c      	movs	r3, #12
 80017d2:	2500      	movs	r5, #0
 80017d4:	6033      	str	r3, [r6, #0]
 80017d6:	0028      	movs	r0, r5
 80017d8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80017da:	6822      	ldr	r2, [r4, #0]
 80017dc:	1bd1      	subs	r1, r2, r7
 80017de:	d420      	bmi.n	8001822 <_malloc_r+0xce>
 80017e0:	290b      	cmp	r1, #11
 80017e2:	d917      	bls.n	8001814 <_malloc_r+0xc0>
 80017e4:	19e2      	adds	r2, r4, r7
 80017e6:	6027      	str	r7, [r4, #0]
 80017e8:	42a3      	cmp	r3, r4
 80017ea:	d111      	bne.n	8001810 <_malloc_r+0xbc>
 80017ec:	602a      	str	r2, [r5, #0]
 80017ee:	6863      	ldr	r3, [r4, #4]
 80017f0:	6011      	str	r1, [r2, #0]
 80017f2:	6053      	str	r3, [r2, #4]
 80017f4:	0030      	movs	r0, r6
 80017f6:	0025      	movs	r5, r4
 80017f8:	f000 f86c 	bl	80018d4 <__malloc_unlock>
 80017fc:	2207      	movs	r2, #7
 80017fe:	350b      	adds	r5, #11
 8001800:	1d23      	adds	r3, r4, #4
 8001802:	4395      	bics	r5, r2
 8001804:	1aea      	subs	r2, r5, r3
 8001806:	429d      	cmp	r5, r3
 8001808:	d0e5      	beq.n	80017d6 <_malloc_r+0x82>
 800180a:	1b5b      	subs	r3, r3, r5
 800180c:	50a3      	str	r3, [r4, r2]
 800180e:	e7e2      	b.n	80017d6 <_malloc_r+0x82>
 8001810:	605a      	str	r2, [r3, #4]
 8001812:	e7ec      	b.n	80017ee <_malloc_r+0x9a>
 8001814:	6862      	ldr	r2, [r4, #4]
 8001816:	42a3      	cmp	r3, r4
 8001818:	d101      	bne.n	800181e <_malloc_r+0xca>
 800181a:	602a      	str	r2, [r5, #0]
 800181c:	e7ea      	b.n	80017f4 <_malloc_r+0xa0>
 800181e:	605a      	str	r2, [r3, #4]
 8001820:	e7e8      	b.n	80017f4 <_malloc_r+0xa0>
 8001822:	0023      	movs	r3, r4
 8001824:	6864      	ldr	r4, [r4, #4]
 8001826:	e7a7      	b.n	8001778 <_malloc_r+0x24>
 8001828:	002c      	movs	r4, r5
 800182a:	686d      	ldr	r5, [r5, #4]
 800182c:	e7af      	b.n	800178e <_malloc_r+0x3a>
 800182e:	230c      	movs	r3, #12
 8001830:	0030      	movs	r0, r6
 8001832:	6033      	str	r3, [r6, #0]
 8001834:	f000 f84e 	bl	80018d4 <__malloc_unlock>
 8001838:	e7cd      	b.n	80017d6 <_malloc_r+0x82>
 800183a:	46c0      	nop			; (mov r8, r8)
 800183c:	2000009c 	.word	0x2000009c

08001840 <_realloc_r>:
 8001840:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001842:	0007      	movs	r7, r0
 8001844:	000e      	movs	r6, r1
 8001846:	0014      	movs	r4, r2
 8001848:	2900      	cmp	r1, #0
 800184a:	d105      	bne.n	8001858 <_realloc_r+0x18>
 800184c:	0011      	movs	r1, r2
 800184e:	f7ff ff81 	bl	8001754 <_malloc_r>
 8001852:	0005      	movs	r5, r0
 8001854:	0028      	movs	r0, r5
 8001856:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8001858:	2a00      	cmp	r2, #0
 800185a:	d103      	bne.n	8001864 <_realloc_r+0x24>
 800185c:	f7ff ff0e 	bl	800167c <_free_r>
 8001860:	0025      	movs	r5, r4
 8001862:	e7f7      	b.n	8001854 <_realloc_r+0x14>
 8001864:	f000 f83e 	bl	80018e4 <_malloc_usable_size_r>
 8001868:	9001      	str	r0, [sp, #4]
 800186a:	4284      	cmp	r4, r0
 800186c:	d803      	bhi.n	8001876 <_realloc_r+0x36>
 800186e:	0035      	movs	r5, r6
 8001870:	0843      	lsrs	r3, r0, #1
 8001872:	42a3      	cmp	r3, r4
 8001874:	d3ee      	bcc.n	8001854 <_realloc_r+0x14>
 8001876:	0021      	movs	r1, r4
 8001878:	0038      	movs	r0, r7
 800187a:	f7ff ff6b 	bl	8001754 <_malloc_r>
 800187e:	1e05      	subs	r5, r0, #0
 8001880:	d0e8      	beq.n	8001854 <_realloc_r+0x14>
 8001882:	9b01      	ldr	r3, [sp, #4]
 8001884:	0022      	movs	r2, r4
 8001886:	429c      	cmp	r4, r3
 8001888:	d900      	bls.n	800188c <_realloc_r+0x4c>
 800188a:	001a      	movs	r2, r3
 800188c:	0031      	movs	r1, r6
 800188e:	0028      	movs	r0, r5
 8001890:	f7ff fed7 	bl	8001642 <memcpy>
 8001894:	0031      	movs	r1, r6
 8001896:	0038      	movs	r0, r7
 8001898:	f7ff fef0 	bl	800167c <_free_r>
 800189c:	e7da      	b.n	8001854 <_realloc_r+0x14>
	...

080018a0 <_sbrk_r>:
 80018a0:	2300      	movs	r3, #0
 80018a2:	b570      	push	{r4, r5, r6, lr}
 80018a4:	4d06      	ldr	r5, [pc, #24]	; (80018c0 <_sbrk_r+0x20>)
 80018a6:	0004      	movs	r4, r0
 80018a8:	0008      	movs	r0, r1
 80018aa:	602b      	str	r3, [r5, #0]
 80018ac:	f7ff fa9a 	bl	8000de4 <_sbrk>
 80018b0:	1c43      	adds	r3, r0, #1
 80018b2:	d103      	bne.n	80018bc <_sbrk_r+0x1c>
 80018b4:	682b      	ldr	r3, [r5, #0]
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d000      	beq.n	80018bc <_sbrk_r+0x1c>
 80018ba:	6023      	str	r3, [r4, #0]
 80018bc:	bd70      	pop	{r4, r5, r6, pc}
 80018be:	46c0      	nop			; (mov r8, r8)
 80018c0:	200000a4 	.word	0x200000a4

080018c4 <__malloc_lock>:
 80018c4:	b510      	push	{r4, lr}
 80018c6:	4802      	ldr	r0, [pc, #8]	; (80018d0 <__malloc_lock+0xc>)
 80018c8:	f000 f814 	bl	80018f4 <__retarget_lock_acquire_recursive>
 80018cc:	bd10      	pop	{r4, pc}
 80018ce:	46c0      	nop			; (mov r8, r8)
 80018d0:	200000a8 	.word	0x200000a8

080018d4 <__malloc_unlock>:
 80018d4:	b510      	push	{r4, lr}
 80018d6:	4802      	ldr	r0, [pc, #8]	; (80018e0 <__malloc_unlock+0xc>)
 80018d8:	f000 f80d 	bl	80018f6 <__retarget_lock_release_recursive>
 80018dc:	bd10      	pop	{r4, pc}
 80018de:	46c0      	nop			; (mov r8, r8)
 80018e0:	200000a8 	.word	0x200000a8

080018e4 <_malloc_usable_size_r>:
 80018e4:	1f0b      	subs	r3, r1, #4
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	1f18      	subs	r0, r3, #4
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	da01      	bge.n	80018f2 <_malloc_usable_size_r+0xe>
 80018ee:	580b      	ldr	r3, [r1, r0]
 80018f0:	18c0      	adds	r0, r0, r3
 80018f2:	4770      	bx	lr

080018f4 <__retarget_lock_acquire_recursive>:
 80018f4:	4770      	bx	lr

080018f6 <__retarget_lock_release_recursive>:
 80018f6:	4770      	bx	lr

080018f8 <_init>:
 80018f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80018fa:	46c0      	nop			; (mov r8, r8)
 80018fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80018fe:	bc08      	pop	{r3}
 8001900:	469e      	mov	lr, r3
 8001902:	4770      	bx	lr

08001904 <_fini>:
 8001904:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001906:	46c0      	nop			; (mov r8, r8)
 8001908:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800190a:	bc08      	pop	{r3}
 800190c:	469e      	mov	lr, r3
 800190e:	4770      	bx	lr
